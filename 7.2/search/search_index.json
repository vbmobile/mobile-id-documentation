{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting started","text":""},{"location":"index.html#prerequisites","title":"Prerequisites","text":"AndroidiOS <p>To integrate the Mobile ID SDK for Android, the following prerequisites must be met:</p> <ul> <li>Install or update Android Studio to latest version;</li> <li>Target API level 24 (Marshmallow) or later;</li> <li>Use AndroidX, which requires minimum compileSdkVersion 30 or later.</li> <li>Your app needs to have Firebase configured and initialized. For more information, see https://firebase.google.com/docs/android/setup.</li> </ul> <p>To integrate the Mobile ID SDK for iOS, the following prerequisites must be met: </p> <ul> <li>Install or update Xcode to latest version;</li> <li>Target iOS 12 or later.</li> </ul>"},{"location":"index.html#enrolment-sdk-setup","title":"Enrolment SDK setup","text":"AndroidiOS <p>To add the Enrolment SDK to your app, perform the following steps:</p> <ol> <li>Add these new repositories in your app top level gradle file: <pre><code>maven { url \"https://vbmobileidstorage.blob.core.windows.net/android/\" }\nmaven { url \"http://maven.regulaforensics.com/RegulaDocumentReader\" }\n</code></pre></li> <li>Declare Mobile ID SDK as a dependency in your app level gradle file: <pre><code>implementation(\"com.visionbox.mobileid.sdk:mid-sdk-enrolment:&lt;x.x.x&gt;@aar\") { transitive = true }   \n</code></pre></li> <li>Sync gradle.</li> </ol> <p>NOTE: If you are not using Coroutines, you must also also declare these libraries in gradle dependencies: <pre><code>implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1\"\nimplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1\"\n</code></pre></p> <p>To add the Enrolment SDK to your app, perform the following steps:</p> <p>To always use the latest release, add the following to your Podfile:</p> <ol> <li>Add the following to your Podfile, with the latest version: <pre><code>pod 'MobileIdSDKiOS', '5.1.XX'\n</code></pre></li> <li>Add Mobile ID\u2019s cocoapods repo as a source in your podfile: <pre><code>source \u2018https://cdn.cocoapods.org/\n</code></pre></li> <li>Run in Terminal the command below to install pods in your project: <pre><code>pod install\n</code></pre></li> </ol> <p>NOTE: Due the necessity of the SDK to be built for distribution, a post installscript might be needed in your Podfile: (https://github.com/CocoaPods/CocoaPods/issues/9232). Example: <pre><code>post_install do |installer|\n    installer.pods_project.build_configurations.each do |config|\n        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n        config.build_settings[\"EXCLUDED_ARCHS[sdk=iphonesimulator*]\"] = \"arm64\"\n    end\nend\n</code></pre></p>"},{"location":"index.html#how-to-initialize-the-sdk","title":"How to initialize the SDK","text":"<p>The Enrolment provides access to all the SDK features in a simple way. The app needs to create an instance of the Enrolment interface. We recommend treating this instance as Singleton.</p> <p>You can also specify the configurations that will be needed depending on the SDK functionalities you intend to use on your app. </p> <p>By using the available EnrolmentBuilder, you can instantiate the enrolment like this:</p> AndroidiOS <p><pre><code>val apiConfig = APIConfig(\n    baseUrl = URL(\"YOUR BASE URL\"),\n    timeout = 30, // timeout in seconds\n    logLevel = MobileAPILogLevel.BASIC,\n    apiKey = \"YOUR KEY\",\n    publicKey = \"YOUR PUBLIC KEY\", // Optional parameter to ensure requests are encrypted\n)\n\nval enrolmentConfig = EnrolmentConfig(apiConfig)\n\nval enrolment = EnrolmentBuilder\n    .of(context, enrolmentConfig)\n    .build() // The Enrolment should be a singleton\n</code></pre> The following parameters must always be provided:</p> <ul> <li>Context - Application context;</li> <li>EnrolmentConfig - Enrolment configuration.</li> </ul> <pre><code>private let enrolmentConfig = EnrolmentConfig( apiConfig: APIConfig(\n        baseURL: \"YOUR BASE URL\",\n        timeout: 30, // timeout in seconds\n        logLevel: .basic,\n        apiKey: \"YOUR KEY\"\n        publicKey = \"YOUR PUBLIC KEY\" // Optional parameter to ensure requests are encrypted\n))\n\nlet enrolment = EnrolmentBuilder\n    .of(enrolmentConfig: enrolmentConfig)\n    .build() // The Enrolment should be a singleton\n</code></pre> <p>The following parameters must always be provided:</p> <ul> <li>EnrolmentConfig - Enrolment configuration.</li> </ul> <p>The SDK also allows client apps to use their own custom views for its functionalities. These custom views must be defined when creating the Enrolment instance. For more information on custom view, please check the advanced configurations section.</p>"},{"location":"index.html#data-security","title":"Data Security","text":"<p>In version 7.1, an hybrid encryption system was implemented to protect sensitive information and to prevent possible attacks.</p> <p></p> <p>The requests that are sent from the mobile platforms (both iOS and Android) now encrypt the headers that contain sensitive information, and the api key is hashed to prevent it from being leaked.</p> <p>The algorithm used to encrypt the headers is RSA-ECB with a secure padding algorithm.  This cypher mechanism uses a public key to encrypt it and a private key that is only known by the Backend so that they are able to decrypt the headers and verify the data.</p> <p>It is possible to pass a public key as a string in the APIConfig, but you need to pass us the matching private key so that it's uploaded into the backoffice, otherwise the default keys will be used.</p> <p>The API key now also validates if the application that is making the request is known by checking it's ID.  This prevents unauthorized access by using leaked API keys. You need to give us the application IDs that should be allowed to use your API key.</p> <p>In matters of user sensitive information (eg: biometric face capture image), the body of every HTTP request is now encrypted by using AES and a secure padding with a dynamically generated IV. This aims to prevent leaked information by the use of proxy's or interceptors.</p> <p>There's also a data integrity validation system that checks if the response information was not tampered with by comparing the body's hashed value with one of the headers.</p> <p></p>"},{"location":"index.html#configurations","title":"Configurations","text":""},{"location":"index.html#enrolmentconfig","title":"EnrolmentConfig","text":"<p>The EnrolmentConfig is where you set the apiConfig and the apiSecurityConfig. Besides these configurations you can set the logEvents flag, which is used to activate logs.</p> AndroidiOS <pre><code>data class EnrolmentConfig(\n    val apiConfig: APIConfig,\n    val apiSecurityConfig: APISecurityConfig = APISecurityConfig(),\n    val language: Locale\n) : Parcelable\n</code></pre> <pre><code>private let enrolmentConfig = EnrolmentConfig(\n    apiConfig: apiConfig ,\n    apiSecurityConfig, apiSecurityConfig\n    language: language\n)\n</code></pre> <ul> <li>apiConfig: Api configuration;</li> <li>apiSecurityConfig: Api security configuration;</li> <li>language: You can set the language in which the SDK will appear. The default is the system   language;</li> </ul>"},{"location":"index.html#apiconfig","title":"ApiConfig","text":"<p>You always need to specify the baseUrl for your Mobile ID API instance, as well as your provided API key. You can also configure the timeout value for server responses and the log level.</p> AndroidiOS <pre><code>/**\n * Mobile API server config.\n *\n * @param baseUrl url from Mobile API server.\n * @param timeout timeout of a request.\n * @param logLevel log level for requests (e.g. Body, Headers).\n * @param apiKey key to authorize communication with Mobile API.\n * @param publicKey key to use for ciphering/deciphering for secure communications\n */\ndata class APIConfig(\n    val baseUrl: URL,\n    val timeout: Long,\n    val logLevel: MobileAPILogLevel,\n    val apiKey: String,\n    val publicKey: String? = null,\n)\n</code></pre> <pre><code>APIConfig(\n    baseURL: \"YOUR BASE URL\",\n    timeout: 30, \n    logLevel:  .basic, \n    apiKey: \"YOUR KEY\" ,\n    publicKey: String? = nil  \n)\n</code></pre> <ul> <li>baseUrl: Url from Mobile API server;</li> <li>timeout: timeout of a request in seconds;</li> <li>logLevel: log level for requests;</li> <li>apiKey: key to authorize communication with Mobile API;</li> <li>publicKey: key to use for ciphering/deciphering for secure communications</li> </ul> AndroidiOS <pre><code>enum class MobileAPILogLevel {\n    /**\n    * no logs.\n    */\n    NONE,\n\n    /**\n    * logs request and response lines.\n    */\n    BASIC\n}\n</code></pre> <pre><code>public enum APILogLevel {\n    /// No logs.\n    case none\n    /// Logs http status code and name of endpoint.\n    case basic\n}\n</code></pre>"},{"location":"index.html#apisecurityconfig","title":"APISecurityConfig","text":"<p>You can use the security config to specify a list of SSL certificates to be trusted when connecting the SDK to a server instance. By providing this configuration, you are activating certificate pinning for every network request made by the SDK.</p> AndroidiOS <pre><code>@Parcelize\ndata class APISecurityConfig(\n    val certificates: List&lt;X509Certificate&gt; = listOf()\n) : Parcelable\n</code></pre> <pre><code>struct APISecurityConfig {\n    /// Certificates to verify against Certificate Pinning\n    let sslCertificates: [SecCertificate]\n    init(sslCertificates: [SecCertificate]) {\n        self.sslCertificates = sslCertificates\n    }\n}\n</code></pre> <ul> <li>certificates: used for certificate pinning</li> </ul>"},{"location":"index.html#advanced-configurations","title":"Advanced Configurations","text":"AndroidiOS <p>The other configurations are used by their corresponding facade method:</p> <ul> <li>DocumentReaderConfig - Multipage processing and Regula database ID;</li> <li>BoardingPassCustomViews - Specifies the boarding pass custom views;</li> <li>BiometricFaceCaptureCustomViews - Specifies the face capture custom views;</li> <li>DocumentReaderCustomViews - Specifies the document reader custom views.</li> <li>BiometricFaceMatchCustomViews - Specifies the face match custom views.</li> <li>SubjectCustomViews - Specifies the subject custom views.</li> </ul> <p>These custom views are instantiated in the sdk using reflection, so for this reason, pro-guard might obfuscate some constructors. It's important to use pro-guard rules on the custom views that you created to avoid issues on the building process. Check here for more details on how to create rules to keep the class.</p> <p>The following sections show some examples of the mentioned configurations.</p> <pre><code>val builder: EnrolmentBuilder = EnrolmentBuilder\n    .of(context, config)\n    .withDocumentReaderConfig(\n        DocumentReaderConfig(\n            multipageProcessing = true,\n            databaseId = \"DatabaseName\"\n        )\n    )\n    .withDocumentReaderCustomViews(\n        DocumentReaderCustomViews(\n            loadingView = DocumentReaderCustomViewLoading::class.java,\n            rfidInstructionsView = DocumentReaderCustomViewRfidInstructions::class.java,\n            rfidSearchView = DocumentReaderCustomViewRfidSearch::class.java,\n            rfidProcessView = DocumentReaderCustomViewRfidProcess::class.java,\n        )\n    )\n    .withBiometricFaceCaptureCustomViews(\n        BiometricFaceCaptureCustomViews(\n            loadingView = BiometricFaceCaptureCustomViewLoading::class.java\n        )\n    )\n    .withBoardingPassCustomViews(\n        BoardingPassCustomViews(\n            loadingView = BoardingPassCustomViewLoading::class.java\n        )\n    )\n    .withBiometricFaceMatchCustomViews(\n        BiometricFaceMatchCustomViews(\n            loadingView = BiometricFaceMatchCustomViewLoading::class.java\n        )\n    )\n    .withSubjectCustomViews(\n        SubjectCustomViews(\n            loadingView = SubjectCustomViewLoading::class.java\n        )\n    )\n\nreturn builder.build()\n</code></pre> <p>You can now apply and implement your own UI solutions for the SDK  with the new feature of custom views for the Mobile ID SDK, giving you even more control with the UI solutions. To enable this feature in your application, you need to create your view and make it conform to the view protocol that you intend to replace in the SDK. Then, you register that view in the new EnrolmentViewRegister class of the SDK  and you build the enrolment instance with that viewRegister  instance. </p> <p>The following code shows an example: <pre><code>let viewRegister = EnrolmentViewRegister()\nviewRegister.registerBiometricMatchErrorOverlayView(BiometricMatchErrorView.self)\n\nlet enrolmentConfig = r.resolve(EnrolmentConfig.self)!\nlet documentReaderConfig = r.resolve(DocumentReaderConfig.self)!\n\nlet enrolment = EnrolmentBuilder.of(enrolmentConfig: enrolmentConfig)\n        .with(documentReaderConfig: documentReaderConfig)\n        .with(viewRegister: viewRegister)\n        .build()\n</code></pre></p>"},{"location":"index.html#localization-support","title":"Localization Support","text":"AndroidiOS <p>If you wish to add localization support to your application or change some of the default values, you will need to add the strings used by Enrolment SDK to each locale strings.xml file.</p> <p>You can redefine each string in the Enrolment SDK with the appropriate translations.</p> <p>This ensures that the Enrolment SDK uses the correct string resources when the user's device is set to a language supported by your application.</p> <p>To do this, you'll need to reference the identifiers found in the values.xml file from the latest release.</p> <p>You can find the values.xml file with all available strings in the project: External Libraries -&gt; Gradle: com.visionbox.mobileid.sdk:mid-sdk-enrolment:x.x.x@aar -&gt; res -&gt; values -&gt; values.xml.</p> <p>If you wish to change the default string values, you will need to access the strings you want to change through EnrolmentProtocol.theme.strings. In the ThemeStrings struct you can find the various types of strings you can modify to your liking by assigning a localizable key or a literal string value.</p> <p>If you wish to add localization support to your application, you need to create a String File(s) for your app and specify which language the file represents.</p> <p>If you pass a language to EnrolmentConfig and do not have a String File that matches said language and the SDK does, the SDK will use its file, but if we do not have a String File of said language, the key value of the localizable key raw value will be used in the UI.</p> <p>If no language is passed to EnrolmentConfig, the SDK will select the device's default language and use a String File compatible with said language. The same logic applies in this case. If you do not have a file for the correspondent language, the SDK will select its file, but if it also does not have one, the localizable key raw values will be displayed in the UI. </p>"},{"location":"index.html#rfid-chip-processing","title":"RFID Chip Processing","text":"AndroidiOS <p>In order to use the RFID feature, the user must give the NFC permission in runtime, otherwise it won't work.  We already handle the permission check and added to the manifest the following:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.NFC\" /&gt;\n</code></pre> <p>So when using the RFID feature, the user will be prompted to concede the permission if it hadn't already.</p> <p>Here you can find the necessary changes in order to read the RFID chip present in some documents:</p>"},{"location":"index.html#permissions","title":"Permissions","text":"<p>Add Near Field Communication Tag Reading under the Capabilities tab for the project\u2019s target:  Add the NFCReaderUsageDescription permission to your Info.plist file as its needed to access the NFC hardware: <pre><code>&lt;key&gt;NFCReaderUsageDescription&lt;/key&gt;\n&lt;string&gt;NFC tag to read NDEF messages&lt;/string&gt;\n</code></pre> Declare com.apple.developer.nfc.readersession.iso7816.select-identifiers a list of application identifiers that the app must be able to read according to ISO7816: <pre><code>&lt;key&gt;com.apple.developer.nfc.readersession.iso7816.select-identifiers&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;E80704007F00070302&lt;/string&gt;\n    &lt;string&gt;A000000167455349474E&lt;/string&gt;\n    &lt;string&gt;A0000002480100&lt;/string&gt;\n    &lt;string&gt;A0000002480200&lt;/string&gt;\n    &lt;string&gt;A0000002480300&lt;/string&gt;\n    &lt;string&gt;A00000045645444C2D3031&lt;/string&gt;\n&lt;/array&gt;\n</code></pre></p>"},{"location":"index.html#camera-permissions","title":"Camera Permissions","text":"<p>In order for the SDK to use the camera, the user must grant permission to do so.</p> AndroidiOS <p>In order to use the camera related features, the user must give the camera permission in runtime, otherwise it won't work.  We already handle the permission check and added to the manifest the following:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n</code></pre> <p>So when using any feature that needs the camera, the user will be prompted to concede the permission if it hadn't already.</p> <p>To configure access alerts, follow the steps bellow.</p> <p>In the app's Info.plist file, include NSCameraUsageDescription. After including NSCameraUsageDescription in your Info.plist file, provide a message that explains the user why your app needs to capture media. </p>"},{"location":"index.html#custom-styles","title":"Custom Styles","text":"AndroidiOS <p>You can apply your app\u2019s own colors and fonts to all the provided SDK layout solutions, which means that the SDK views can adapt to your app\u2019s design.  It brings control and allows the maintenance of consistency in terms of brand communication when using the SDK custom views for data presentation. </p> <p>The fonts we are using in the SDK are named enrolment_sdk_medium and enrolment_sdk_regular. If you use fonts with the same name in your app, they will be used, otherwise the SDK will use its own.  We do not advise to override strings. Our strings\u2019 names in strings.xml end in _sdk_enrolment precisely to prevent any unexpected behaviors.</p> <p>The list of colors used in each screen will be available on their respective documentation for your reference.</p> <p>You can apply your app\u2019s own styles to all the provided SDK  layout solutions, which means that the SDK  views can adapt to your app\u2019s design.  It brings control and allows the maintenance of consistency in terms of brand communication when using the SDK  custom views for data presentation.</p> <p>The following image shows an example of how you could override SDK  values for fonts, colors and strings: <pre><code>enrolment.theme.fonts.medium = FontDescription(name: \"FontName-Medium\")\nenrolment.theme.colors.faceCapture.stateError = UIColor(name: .colorPrimary)\nenrolment.theme.strings.faceCapture.title = \"Face Capture Title\"\n</code></pre></p> <p>Please check the complete list of colors for your reference:</p> Name Value Section common.clear Clear_SdkEnrolment Base common.black Black_SdkEnrolment Base component.dismissButton DismissButton_SdkEnrolment Base component.transparentOverlay TransparentOverlay_SdkEnrolment Base component.animationIndicatorBackground AnimationIndicationBackgroud_SdkEnrolment Base component.animationIndicatorMessage AnimationIndicatorMessage_SdkEnrolment Base datafield.title DataFieldTitle_SdkEnrolment Base datafield.value DataFieldValue_SdkEnrolment Base datafield.error DataFieldError_SdkEnrolment Base button.primaryTitle ButtonPrimaryTitle_SdkEnrolment Button button.primaryBackground ButtonPrimaryBackground_SdkEnrolment Button button.secondaryTitle ButtonSecondaryTitle_SdkEnrolment Button button.secondaryBackground ButtonSecondaryBackground_SdkEnrolment Button button.secondaryBorder ButtonSecondaryBorder_SdkEnrolment Button documentData.background DocumentDataBackground_SdkEnrolment Document read documentData.title DocumentDataTitleSdkEnrolment Document read documentData.subtitle DocumentDataSubtitle_SdkEnrolment Document read documentData.detailBackground DocumentDataDetailBackground_SdkEnrolment Document read rfidData.background RfidDataBackground_SdkEnrolment Document read rfidData.title RfidDataTitle_SdkEnrolment Document read rfidData.subtitle RfidDataSubtitle_SdkEnrolment Document read faceCapture.background FaceCaptureBackground_SdkEnrolment Face capture faceCapture.title FaceCaptureTitle_SdkEnrolment Face capture faceCapture.flash FaceCaptureFlash_SdkEnrolment Face capture faceCapture.stateLabel FaceCaptureStateLabel_SdkEnrolment Face capture faceCapture.stateValid FaceCaptureStateValid_SdkEnrolment Face capture faceCapture.stateError FaceCaptureStateError_SdkEnrolment Face capture faceCapture.stateNeutral FaceCaptureStateNeutral_SdkEnrolment Face capture boardingPassScan.background BoardingPassScanBackground_SdkEnrolment Boarding pass scan boardingPassPreview.background BoardingPassPreviewBackground_SdkEnrolment Boarding pass scan boardingPassPreview.legHeader BoardingPassPreviewLegHeader_SdkEnrolment Boarding pass scan"},{"location":"index.html#dependencies","title":"Dependencies","text":"AndroidiOS <ul> <li> <p>MLKit</p> <ul> <li>com.google.mlkit:barcode-scanning:17.2.0</li> <li>com.google.mlkit:face-detection:17.1.0</li> <li>androidx.camera:camera-camera2:1.3.1</li> <li>androidx.camera:camera-lifecycle:1.3.0</li> <li>androidx.camera:camera-view:1.3.0</li> </ul> </li> <li> <p>Regula</p> <ul> <li>com.regula.documentreader:api:7.3.10030@aar</li> <li>com.regula.documentreader.core:ocrandmrzrfid:7.3.11349@aar</li> </ul> </li> <li> <p>Sentry</p> <ul> <li>io.sentry:sentry-android:6.28.0</li> </ul> </li> <li> <p>Lottie</p> <ul> <li>com.airbnb.android:lottie:6.1.0</li> </ul> </li> </ul> <ul> <li>'DocumentReader', '~&gt; 7.2.0'</li> <li>'DocumentReaderOCRRFID', '~&gt; 7.2.0'</li> <li>'Sentry', '8.13.1'</li> <li>'lottie-ios', '~&gt; 4.3.3'</li> </ul>"},{"location":"index.html#glossary-and-terminology","title":"Glossary and Terminology","text":"<p>The following descriptions include the terminology found within this manual:</p> Name Description API (Application Program Interface) An application program interface is a set of routines, protocols, and tools for building software applications. Basically, an API specifies how software components should interact. APIS (Advance Passenger Information System) An electronic data interchange system intended to enhance border security. An APIS collects and shares limited data on passengers and crew members, such as identification details from the passport and basic flight information. Passengers must provide this data before traveling to or from certain countries. Then the airlines or vessel operators share it with the computer system of the destination state. BCBP (Bar-Coded Boarding Pass) A standard issued by the International Air Transport Association (IATA) that defines the format and content of electronic boarding passes. BCBP defines the two-dimensional (2D) barcode and the symbologies used for paper and mobile boarding passes. Airlines, airports, and other air industry stakeholders use barcode readers to capture the data from the electronic boarding passes to process the security check and boarding of travelers. Certificate Electronic document establishing a digital identity by combining the identity name or identifier with the public key of the identity, a validity period, and an electronic signature by a third party. DK (Data Key) A key used to protect an entity, where in this instance an entity is biographic data related to a TD, a BCBP, biometric data or other entity relating to a natural person. IATA (International Air Transport Association) A trade association representing airlines worldwide. IATA supports many areas of aviation activity and formulates industry policies on critical aviation issues. IATA works with other international bodies, such as ICAO and WCO. LED (Light Emitting Diode) A two-lead semiconductor light source. LEDs provide many advantages when used for environmental lighting, such as smaller volume, longer lifetime, and lower energy requirements. Liveness Indication whether an acquired biometric sample comes from a genuine living passenger or not. The liveness detection is used to detect if a passenger is trying to spoof the system. MRZ (Machine Readable Zone) MRZ Machine Readable ZoneThe area of the travel document containing data in an optical character recognition format that allows the information to be read automatically by a machine, such as a passport reader. NFC (Near Field Communication) NFC Near Field CommunicationA method of wireless data transfer that evolved from Radio-Frequency Identification (RFID) technology. This method detects and enables two electronic devices near establish communication without the need for an internet connection. Devices with an NFC chip (for example, smartphones) can detect a chip from another device and transfer data when both devices are held within 4 cm (2 in.) from each other. QR code (Quick Response Code) A type of 2D barcode used to provide easy access to information through a smartphone. A QR code consists of black modules (square dots) arranged in a square grid on a white background, which can be read by an imaging device (such as a camera or scanner). The required data is extracted from the patterns that are present in both horizontal and vertical components of the image. The QR code system became widespread due to its fast readability and greater storage capacity compared to standard barcodes. It is commonly used in item identification, product tracking, time tracking, and document management. RFID (Radio-Frequency Identification) A technology of wireless communication that uses radio waves to automatically identify and track objects. The objects contain tags that store electronic information. An RFID system enables readers to retrieve data from identification documents, such as smart cards. RFID devices work within a vicinity of between a few centimeters to several meters (up to 20 feet) for high-frequency devices. TD (Travel Document) A passport or ID card in ICAO format authorised for border control. TLS/SSL TLS SSL Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), are cryptographic protocols designed to provide communications security over a computer network. User A person that uses the equipment under the supervision of trained staff. Workflow Orchestrated and repeatable pattern of processes, running in the touchpoints, which represents the desired behaviour of the cluster."},{"location":"Features/BiometricMatch/BiometricMatch_ErrorView.html","title":"Error View","text":"<p>When the showErrors flag is set to true in the BiometricMatchParameters class, then any error that happens in this feature will show a default screen with some information. You can either customize this screen to your branding or set the flag to false and handle the error in your own activity.</p> <p>It contains a title(1), a message(2), an image(3), a warning icon(4), a list item layout(5), a retry button(6) and a background that can be customized. </p>"},{"location":"Features/BiometricMatch/BiometricMatch_ErrorView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/BiometricMatch/BiometricMatch_ErrorView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"feature_failure_title_sdk_enrolment\"&gt;There\\'s something wrong&lt;/string&gt;\n&lt;string name=\"feature_failure_subtitle_sdk_enrolment\"&gt;Check the items below:&lt;/string&gt; \n</code></pre></p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_ErrorView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorOverlayInvalidTxtSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayInvalidBgSdkEnrolment\"&gt;#F1F0F4&lt;/color&gt;\n</code></pre></p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_ErrorView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_ErrorView.html#image","title":"Image","text":"AndroidiOS <p>You can change the loading image by adding a drawable with this name: <pre><code>ic_verification_loading.xml\n</code></pre> The image we are using is 240x240dp.</p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_Index.html","title":"Biometric Matching","text":"<p>This service allows the submission of two different biometric images, to verify that they represent the same person. This is necessary whenever there is the need of checking if the current user is the same person as the physical ID owner in any enrolment process. The candidate image is also submitted to a service that performs a biometric quality check before the matching process.</p>"},{"location":"Features/BiometricMatch/BiometricMatch_Index.html#initiate-match","title":"Initiate Match","text":"<p>You can easily provide your client app with a biometric check using our SDK\u2019s biometric matching functionality, available in the enrolment facade. You need to provide a BiometricMatchParameters object that includes the reference biometrics image (for example, an official document\u2019s photo), against which you want to test your candidate image, also passed as a bitmap in this object. You also can include the template option if you want to get the images templates. None is the default. Below is the BiometricMatchParameters structure:</p> AndroidiOS <pre><code>data class BiometricMatchParameters(\n    val candidate: Bitmap?,\n    val reference: Bitmap?,\n    val templateOption: TemplateOption = TemplateOption.NONE,\n    val showErrors: Boolean,\n    val candidateHash: String?,\n    val referenceHash: String?\n)\n</code></pre> <pre><code>public struct BiometricMatchParameters {\n    public let candidate: Data\n    public let reference: Data\n    public let includeTemplate: TemplateOptions\n    public let showErrors: Bool\n    public let candidateHash: String?\n    public let referenceHash: String?\n\n    public init(candidate: Data,\n            reference: Data,\n            includeTemplate: TemplateOptions = .none,\n            showErrors:Bool,\n            candidateHash: String?,\n            referenceHash: String?) \n}\n</code></pre> <p>TemplateOptions is an enumeration and it contains the following cases.</p> AndroidiOS <pre><code>enum class TemplateOption {\n    NONE,\n    ALL,\n    CANDIDATE,\n    REFERENCE\n}\n</code></pre> <pre><code>public enum TemplateOptions: String {\n    case none = \"None\"\n    case all = \"All\"\n    case reference = \"Reference\"\n    case candidate = \"Candidate\"\n}\n</code></pre> <p>The <code>candidateHash</code> and <code>referenceHash</code> are the hashes provided by either the <code>FaceCaptureReport</code> and/or the DocumentReaderReport needed to verify data integrity.</p> <p>You can expect either a MatchError response or a MatchReport response. </p> <p>To start the biometric matching, you must call the following method:</p> AndroidiOS <pre><code>/**\n * Matches two face photos to check if they're from the same person.\n *\n * Used to match the user face photo against the photo contained in the chip from the personal document.\n *\n * @param context [Context] that contains the user photo, the photo from the document.\n * @param params [BiometricMatchParameters] that contains the user photo, the photo from the document.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results.\n */\nfun matchBiometrics(\n    context: Context,\n    params: BiometricMatchParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>func matchBiometrics(parameters: BiometricMatchParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;MatchReport, MatchReportError&gt;) -&gt; Void)\n</code></pre> <p>A successful MatchReport response means that matching analysis was successfully computed in the server-side platform. If the candidate image (for example, a captured photo) scores above the previously given threshold, the matched value will be true. The field matchDuration gives you information on the request\u2019s duration and also the templates, if they were requested.</p>"},{"location":"Features/BiometricMatch/BiometricMatch_Index.html#handle-result","title":"Handle Result","text":"AndroidiOS <p>Here's how you can get the result by using the result launcher that's passed as the final parameter: <pre><code>private val matchBiometricResultLauncher = registerForActivityResult(MatchResultLauncher())\n{ result: MatchActivityResult -&gt;\n    when {\n        result.success -&gt; onMatch(result.matchReportSuccess)\n        result.matchReportError?.userCanceled == true -&gt; userCanceled()\n        result.matchReportError?.termsAndConditionsAccepted == false -&gt;     termsAndConditionsNotAccepted()\n        else -&gt; onMatchFailed()\n    }\n}\n</code></pre></p> <p>The MatchReportError has the following structure:</p> <pre><code>data class MatchReportError(\n    val userCanceled: Boolean,\n    val termsAndConditionsAccepted: Boolean,\n    val featureError: FeatureError?\n)\n</code></pre> <p>These method\u2019s completion handler passes a result , where the MatchReport contains the Match information and MatchReportError contains the possible errors that may occur during the process. Below is an example of usage:</p> <pre><code>self.enrolment.matchBiometrics(\n    parameters: parameters,\n    viewController: vco) { [weak self] result in\n    switch result {\n    case .success(let matchReport):\n        if (matchReport.photosMatched) {\n            self?.view?.onMatchSuccess()\n        } else {\n            self?.view?.onMatchFailed()\n        }\n    case .failure(let error):\n        if error.userCanceled {\n            print(\"onUserCancel\")\n        } else {\n            print(error.featureError.publicMessage)\n        }\n    }\n}\n</code></pre> <p>The MatchReportError has the following structure:</p> <pre><code>    public class MatchReportError: Error {\n    public var userCanceled: Bool\n    public var termsAndConditionsAccepted: Bool\n    public var featureError: FeatureError\n}\n</code></pre> <p>In case of success, the MatchReport has the following structure:</p> AndroidiOS <pre><code>data class MatchReport(\n    val matchDuration: String,\n    val photosMatched: Boolean,\n    val algorithm: String?,\n    val referenceTemplate: String?,\n    val candidateTemplate: String?,\n)\n</code></pre> <pre><code>public struct MatchReport: Codable {\n    public let matchDuration: String\n    public let photosMatched: Bool\n    public let algorithm: String?\n    public let referenceTemplate: Data?\n    public let candidateTemplate: Data?\n}\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_Index.html#custom-views","title":"Custom Views","text":"<p>The SDK provides default UI solutions for the boarding pass feature flow, as  shown in the following images:</p> <p></p> <p>You can also apply your app\u2019s colors and fonts to these layout solutions, to keep your brand\u2019s image consistent. Check Customization tab to learn more about branding of each view.</p> AndroidiOS <p><pre><code>@Parcelize\nclass BiometricFaceMatchCustomViews(\n    val loadingView: Class&lt;out ICustomBiometricFaceMatch.LoadingView&gt;? = null\n) : Parcelable\n</code></pre> You can use your own custom views in the face match functionality. Your view must implement the SDK view interfaces. For example, if you want to add a custom loading view, your view class must implement the ICustomBiometricFaceMatch.LoadingView interface.</p> <pre><code>public class EnrolmentViewRegister {\n    ...\n\n    // MARK: - Biometric Match\n    public func registerBiometricMatchLoadingView(_ viewType: BiometricMatchLoadingViewType)\n    ...\n}\n</code></pre> <p>You can use your own custom views in the face match functionality. Your view must implement the SDK view protocols. For example, if you want to add a custom loading view, your view class must implement the BiometricMatchLoadingViewType interface.</p> <p>In the customization tab you will also find examples to create your own custom views.</p>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html","title":"Loading View","text":"<p>The only view of the biometric match flow is the loading view, it appears when the feature is initializing. In this step, a service is called so that the biometric match is done on the server side.</p> <p></p> <p>It contains a title(1), a message(2), an image(3) and a background that can be customized. </p>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"biometric_face_match_title_sdk_enrolment\"&gt;We\u2019re checking your information&lt;/string&gt;\n&lt;string name=\"common_loading_message_sdk_enrolment\"&gt;This will only take a moment&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class</p> <pre><code>Theme.shared.strings.faceMatch.loadingTitle.localized()\nTheme.shared.strings.faceMatch.loadingMessage.localized()\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayFeedbackBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class (It affects all Loading Screens):</p> <pre><code>Theme.shared.colors.checkPermission.title\nTheme.shared.colors.checkPermission.subtitle\n</code></pre> <p>You can change the background color by overriding the following color in Theme class(It affects all Loading Screens):</p> <pre><code>Theme.shared.colors.checkPermission.background\n</code></pre>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html#image","title":"Image","text":"AndroidiOS <p>You can change the loading image by adding a drawable with this name: <pre><code>ic_verification_loading.xml\n</code></pre> The image we are using is 240x240dp.</p> <p>You can change the loading image by overriding the following image name in Theme class <pre><code>Theme.shared.images.faceMatch.matchLoading\n</code></pre></p>"},{"location":"Features/BiometricMatch/BiometricMatch_LoadingView.html#use-your-own-layouts","title":"Use your own layouts","text":"AndroidiOS <p>To use your own loading screen for face match feature, you need to implement the MobileID SDK Interface for that view.</p> <p>In this case: ICustomBiometricFaceMatch.LoadingView <pre><code>interface LoadingView {\n    fun onPreFeatureLoading()\n    fun onServerCommunication()\n    fun onPreparingFeature()\n    fun hideLoading()\n}\n</code></pre> You can use the functions above to change loading screen texts in runtime, or you can opt to ignore those functions.</p> <p>For example create a class BiometricMatchLoadingCustomView, create a layout file and bind it.</p> <pre><code>class BiometricMatchLoadingCustomView (\n    context: Context\n) : LinearLayoutCompat(context), ICustomBiometricFaceMatch.LoadingView {\n    private var binding: ViewBiometricMatchLoadingBinding\n\n    init {\n        binding = ViewBiometricMatchLoadingBinding.inflate(LayoutInflater.from(context), this)\n        orientation = VERTICAL\n        gravity = Gravity.CENTER\n    }\n\n    override fun onPreFeatureLoading() {\n        // Do nothing\n    }\n\n    override fun onServerCommunication() {\n        binding.tvFaceMatchLoadingTitle.text = \"Initializing Biometric Match\"\n        binding.tvFaceMatchLoadingMessage.text = \"Loading, please wait..\"\n    }\n\n    override fun onPreparingFeature() {\n        binding.tvFaceMatchLoadingTitle.text = \"Matching biometrics\"\n        binding.tvFaceMatchLoadingMessage.text = \"Please wait..\"\n    }\n\n    override fun hideLoading() {\n        // Do nothing\n    }\n}\n</code></pre> <p>You need to register a class of type BiometricMatchLoadingViewType through the following function of EnrolmentViewRegister <pre><code>public func registerBiometricMatchLoadingView(_ viewType: BiometricMatchLoadingViewType)\n</code></pre></p> <p>The BiometricMatchLoadingViewType class needs to respect the following protocols:</p> <pre><code>public protocol BiometricMatchLoadingViewInterface : FeatureLoadingViewInterface {\n    func onPreparingFeature()\n}   \n\npublic typealias BiometricMatchLoadingViewType = BiometricMatchLoadingView.Type\npublic typealias BiometricMatchLoadingView = UIView &amp; BiometricMatchLoadingViewInterface\n\npublic protocol FeatureLoadingViewInterface {\n    func onPreFeatureLoading()\n    func onPostFeatureLoading()\n    func hideLoading()\n}\n\npublic typealias FeatureLoadingViewType = FeatureLoadingView.Type\npublic typealias FeatureLoadingView = UIView &amp; FeatureLoadingViewInterface\n</code></pre> <p>Example: <pre><code>class LoadingView: LoadingOverlayView {\n// MARK: - Initialization\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        //add any UI customization you need\n    }\n\n// MARK: - Functions\n\n    func onPreparingFeature() {\n        //add any UI customization you need\n    }\n\n    func onPreFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func onPostFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func hideLoading() {\n        //You can stop animations or other activities that consumes resources \n    }\n}\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ErrorView.html","title":"Error View","text":"<p>In case any error happens in the Boarding pass flow and the flag showErrors is active, the Error View will appear in order to give the final user feedback as to may have gone wrong, allowing them to retry or cancel.</p> <p></p> <p>It contains a close button(1), a title(2), a message(3), an image(4), a retry button (5) and a background that can be customized.</p> <p>The subtitle text will be the description of the error.</p>"},{"location":"Features/BoardingPass/BoardingPass_ErrorView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/BoardingPass/BoardingPass_ErrorView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"feature_failure_title_sdk_enrolment\"&gt;There\\'s something wrong&lt;/string&gt;\n\n&lt;!-- Button text (Used in multiple places) --&gt;\n&lt;string name=\"try_again_sdk_enrolment\"&gt;Try again&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class for the title <pre><code>Theme.shared.strings.common.failureTitle\n</code></pre> You can override the following string keys, for the field of messages <pre><code>\"boarding_pass_barcorde_empty_error\" = \"Boarding Pass barcorde is empty\";\n\"boarding_pass_format_not_supported_error\" = \"Boarding Pass format not supported\";\n\"boarding_pass_parser_error\" = \"Boarding Pass parser error\";\n\"boarding_pass_config_error\" = \"Error reading Boarding Pass\";\n\"boarding_pass_not_valid_error\" = \"Boarding Pass not valid\";\n\"boarding_pass_cancelled_error\" = \"Boarding Pass cancelled Error\";\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ErrorView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorOverlayInvalidTxtSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayInvalidBgSdkEnrolment\"&gt;#F1F0F4&lt;/color&gt;\n</code></pre></p> <p>You can change the buttons text and background color by overriding the following color resources: <pre><code>&lt;color name=\"colorButtonBlueBackgroundTintSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n&lt;color name=\"colorButtonBlueTextSdkEnrolment\"&gt;@android:color/white&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class  <pre><code>Theme.shared.colors.faceCapture.titleDark// title(2) and message(3) (It affects other screens)\n</code></pre> You can change the background color by overriding the following color in Theme class: <pre><code>Theme.shared.colors.faceCapture.background (It affects other screens)\n</code></pre> You can change the color of the close button(1) (It affects other screens) <pre><code>Theme.shared.colors.common.black\n</code></pre> You can change the color of the button (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ErrorView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Button.Blue\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ErrorView.html#image","title":"Image","text":"AndroidiOS <p>You can change the image by adding a drawable with this name: <pre><code>ic_boardingpass_gray_large_sdk_enrolment.xml\n</code></pre> The image we are using is 240x240dp.</p> <p>You can change the cancel button icon by adding a drawable with this name: <pre><code>ic_close.xml\n</code></pre> The image we are using is 24x24dp.</p> <p>You can change the image by adding a asset file and overriding the following image name in Theme class <pre><code>Theme.shared.images.buttons.closeButton // It affects all close buttons\nTheme.shared.images.boardingPass.boardingPassError\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_Index.html","title":"Boarding Pass","text":"<p>The boarding pass scan is used to extract encoded information in boarding passes that comply with the BCBP (Bar-Coded Boarding Pass) standard. The SDK is prepared to return the data from boarding passes in the following supported formats: </p> <ul> <li>Barcode PDF417;</li> <li>Aztec;</li> <li>QR code;</li> <li>DataMatrix.</li> </ul> <p>Additionally, you can submit the boarding pass data to a back-end server platform when creating a subject.</p>"},{"location":"Features/BoardingPass/BoardingPass_Index.html#initiate-scan","title":"Initiate Scan","text":"<p>Another functionality available in the enrolment facade is the bar-coded boarding pass scanning. This is helpful whenever your app needs to extract all encoded information in a printed or digital boarding pass if it was generated according to the international BCBP standard. </p> <p>The mobile device will be able to scan boarding passes using the back camera. The SDK supports all the available formats in the IATA Bar-Coded Boarding Pass standard: PDF417, Aztec, QR code and DataMatrix. To start the barcode scanner, you must call the following method:</p> AndroidiOS <pre><code>/**\n* Scans a Bar Coded Boarding Pass (BCBP).\n*\n* @param context [Context] Activity holder\n* @param params [BoardingPassScanParameters] required to start the boarding pass scan feature.\n* @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results.\n*/\nfun scanBoardingPass(\n    context: Context,\n    params: BoardingPassScanParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>func scanBoardingPass(parameters: ScanBoardingPassParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;BoardingPassFull, BoardingPassError&gt;) -&gt; Void)\n</code></pre> <p>The BoardingPassScanParameters has the following structure:</p> AndroidiOS <pre><code>@Parcelize\ndata class BoardingPassScanParameters(\n    val showPreview: Boolean,\n    val showErrors: Boolean,\n    val validate: Boolean\n) : Parcelable\n</code></pre> <pre><code>public struct ScanBoardingPassParameters {\n    public let showPreview: Bool\n    public let showErrors: Bool\n    public let validateBoardingPass: Bool\n\n    public init(showPreview: Bool,\n                showErrors: Bool,\n                validateBoardingPass: Bool)\n}\n</code></pre> <p>The showPreview flag should be set to true if you want the SDK to present the details of the scanned boarding pass, the showErrors flag should be set to true if you want the SDK to present the default error screens to show the errors that occur during the features and the validate flag should be set to true if you want the SDK to validate the boarding pass data. </p> <p>If you want to use your own boarding pass scanner, you can also provide the raw result of the scan and pass it to the facade\u2019s parser method. It will return the BoardingPass object. The raw result must be passed to the BoardingPassData, which has to be included in the BoardingPassParserParameters.</p> <p>From version 7 onwards there is a new way to parse a boarding pass, by giving us an image URI and if the boarding pass is detected in it, it will be parsed and you will receive a BoardingPass object without requiring to provide us the format.</p> AndroidiOS <pre><code>/**\n * Parses a Bar Coded Boarding Pass (BCBP).\n *\n * @param context\n * @param params [BoardingPassStringParserParameters] required to start the boarding pass parser feature.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results.\n */\nfun parseBoardingPass(\n    context: Context,\n    params: BoardingPassStringParserParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n\n/**\n * Parses an image of a Bar Coded Boarding Pass (BCBP).\n *\n * @param context\n * @param params [BoardingPassImageParserParameters] required to start the boarding pass image parser feature.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results.\n */\nfun parseBoardingPass(\n    context: Context,\n    params: BoardingPassImageParserParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>func parseBoardingPass(parameters: ParseBoardingPassParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;BoardingPass, BoardingPassParserError&gt;) -&gt; Void)\n</code></pre> <p>The BoardingPassParserParameters object has the following structure:</p> AndroidiOS <pre><code>/**\n* Parameters for each [BoardingPass] parser operation.\n*\n* @param showPreview if true, it will show a preview of [BoardingPass].\n* @param showErrors if true, it will show a error screen that contains information regarding any error that happened during this feature.\n* @param validate if true, it will perform validation of the [BoardingPass] fields.\n*/\n@Parcelize\nopen class BoardingPassParserParameters(\n    open val showPreview: Boolean,\n    open val showErrors: Boolean,\n    open val validate: Boolean\n) : Parcelable\n\n/**\n* Parameters for each [BoardingPass] parser operation.\n*\n* @param boardingPassData [BoardingPassData] that will that has the barcode raw data and format to be parsed to a [BoardingPass].\n*/\n@Parcelize\ndata class BoardingPassStringParserParameters(\n    val boardingPassData: BoardingPassData,\n    override val showPreview: Boolean,\n    override val showErrors: Boolean,\n    override val validate: Boolean\n) : BoardingPassParserParameters(\n    showPreview,\n    showErrors,\n    validate\n)\n\n/**\n* Parameters for each [BoardingPass] parser operation.\n*\n* @param uri URI to an image file of a [BoardingPass] that will be analyzed and parsed.\n*/\n@Parcelize\ndata class BoardingPassImageParserParameters(\n    val uri: Uri,\n    override val showPreview: Boolean,\n    override val showErrors: Boolean,\n    override val validate: Boolean\n) : BoardingPassParserParameters(\n    showPreview,\n    showErrors,\n    validate\n)\n</code></pre> <pre><code>public struct ParseBoardingPassParameters {\n    public let showPreview: Bool\n    public let showErrors: Bool\n    public let validateBoardingPass: Bool\n    public let boardingPassData: BoardingPassData\n    public let boardingPassImage: UIImage?\n\n    public init(showPreview: Bool,\n                showErrors: Bool,\n                validateBoardingPass: Bool,\n                boardingPassData: BoardingPassData,\n                boardingPassImage: UIImage?)\n}\n</code></pre> <p>The BoardingPassData is a model where you will have to provide the raw barcode scan result and the barcode format. Below is the model structure:</p> AndroidiOS <pre><code>@Parcelize\ndata class BoardingPassData(\n    val rawBarcodeData: String,\n    val barcodeFormat: BarcodeFormat\n) : Parcelable\n</code></pre> <pre><code>public struct BoardingPassData {\n    public let rawBarcodeData: String\n    public let barcodeFormat: BarcodeFormat\n\n    public init(rawBarcodeData: String, barcodeFormat: BarcodeFormat)\n}\n</code></pre> <p>BarcodeFormat is an enumeration and it contains the following cases.</p> AndroidiOS <pre><code>enum class BarcodeFormat(val value: String) {\n    AZTEC(\"AZTECCODE\"),\n    PDF417(\"PDF417\"),\n    QR_CODE(\"QR_CODE\"),\n    DATA_MATRIX(\"DataMatrix\")\n}\n</code></pre> <pre><code>public enum BarcodeFormat: String {\n    case aztec\n    case pdf417\n    case qrCode\n    case dataMatrix\n}\n</code></pre>"},{"location":"Features/BoardingPass/BoardingPass_Index.html#handle-result","title":"Handle Result","text":"AndroidiOS <p>Here's how you can get the result by using the result launcher that's passed as the final parameter:</p> <pre><code>private val boardingPassResultLauncher = registerForActivityResult(BoardingPassResultLauncher())\n{ result: BoardingPassActivityResult -&gt;\n    when {\n        result.success -&gt; presenter.storeBoardingPass(result.boardingPass)\n        result.boardingPassError?.userCanceled == true -&gt; onUserCanceled()\n        result.boardingPassError?.termsAndConditionsAccepted == true -&gt; onTermsAndConditionsRejecetd()\n        else -&gt; onBoardingPassScanError()\n    }\n}\n</code></pre> <p>You will receive a model of the type BoardingPassActivityResult that will contain the success data (in this case a BoardingPass) or the error data.</p> <pre><code>data class BoardingPassActivityResult(\n    val boardingPass: BoardingPass?,\n    val boardingPassError: BoardingPassError?\n) {\n    val success get() = boardingPass != null\n}\n</code></pre> <p>The BoardingPassError has the following structure:</p> <pre><code>data class BoardingPassError(\n    val userCanceled: Boolean,\n    val termsAndConditionsAccepted: Boolean,\n    val featureError: FeatureError?\n)\n</code></pre> <p>These method\u2019s completion handler passes a result , where the BoardingPass contains the boarding pass data and BoardingPassScanError contains the possible errors that may occur during the process. Below is an example of usage: <p><pre><code>let parameters = ScanBoardingPassParameters(\n            showPreview: true, showErrors: true, validateBoardingPass: preferences.useIataStandards())\n\n self.enrolment.scanBoardingPass(parameters: parameters, viewController: vc) { [weak self] result in\n        switch result {\n        case .success(let boardingPass):\n            // Handle Success\n        case .failure(let error):\n            if error.userCanceled {\n                print(\"onUserCancel\")\n            } else {\n                print(error.featureError.publicMessage)\n            }\n        }\n    }\n</code></pre> The BoardingPassScanError and BoardingPassError has the following structure:</p> <pre><code>public class BoardingPassError: Error {\n    public var userCanceled: Bool\n    public var termsAndConditionsAccepted: Bool\n    public var featureError: FeatureError\n}\n</code></pre> <p>In case of success, the BoardingPass has the following structure:</p> AndroidiOS <pre><code>@Parcelize\ndata class BoardingPass(\n    val rawBoardingPass: String,\n    val barcodeType: String,\n    val expiryDate: Date,\n    val formatCode: String,\n    val numberOfLegs: Int,\n    val passengerName: String,\n    val electronicTicketIndicator: String,\n    val beginningOfVersionNumber: String? = null,\n    val versionNumber: Int? = null,\n    val passengerDescription: Int? = null,\n    val checkInSource: String? = null,\n    val boardingPassSource: String? = null,\n    val boardingPassDate: String? = null,\n    val documentType: String? = null,\n    val boardingPassIssuerDesignator: String? = null,\n    val baggageTagNumber: String? = null,\n    val firstNonConsecutiveBaggageTagNumber: String? = null,\n    val secondNonConsecutiveBaggageTagNumber: String? = null,\n    val securityDataBeginning: String? = null,\n    val legs: List&lt;Leg&gt;\n) : Parcelable\n</code></pre> <pre><code>public struct BoardingPass: Codable {\n    public let formatCode: String\n    public let barcodeType: String\n    public let numberOfLegsEncoded: Int\n    public let passengerName: String\n    public let electronicTicketIndicator: String?\n    public let rawBoardingPass: String\n    public let expiryDate: Date\n    public let beginningOfVersionNumber: String?\n    public let versionNumber: Int?\n    public let passengerDescription: String?\n    public let checkInSource: String?\n    public let boardingPassSource: String?\n    public let boardingPassDateString: String?\n    public let documentType: String?\n    public let boardingPassIssuerDesignator: String?\n    public let baggageTagNumber: String?\n    public let firstNonConsecutiveBaggageTagNumber: String?\n    public let secondNonConsecutiveBaggageTagNumber: String?\n    public let securityDataBeginning: String?\n    public let legs: [Leg]\n}\n</code></pre> <p>The Leg has the following structure:</p> AndroidiOS <pre><code>@Parcelize\ndata class Leg(\n    val legOrder: Int,\n    val operatingCarrierPnrCode: String,\n    val originAirportCode: String,\n    val destinationAirportCode: String,\n    val operatingCarrierDesignator: String,\n    val flightNumber: String,\n    val flightDate: String,\n    val compartmentCode: String,\n    val seatNumber: String,\n    val checkInSequenceNumber: String,\n    val passengerStatus: String,\n    val airlineNumericCode: String? = null,\n    val serialNumber: String? = null,\n    val selecteeIndicator: Int? = null,\n    val internationalDocumentVerification: Int? = null,\n    val marketingCarrierDesignator: String? = null,\n    val frequentFlyerAirlineDesignator: String? = null,\n    val frequentFlyerNumber: String? = null,\n    val idAdIndicator: String? = null,\n    val freeBaggageAllowance: String? = null,\n    val fastTrack: String? = null\n) : Parcelable\n</code></pre> <pre><code>public struct Leg: Codable {\n    public let flightNumber: String?\n    public let frequentFlyerNumber: String?\n    public let documentSerialNumber: String?\n    public let airlineNumericCode: String?\n    public let passengerStatus: String?\n    public let sequenceNumber: String?\n    public let seatNumber: String?\n    public let compartmentCode: String?\n    public let flightDate: String?\n    public let legOrder: Int?\n    public let carrierDesignator: String?\n    public let destinationAirport: String?\n    public let originAirport: String?\n    public let carrierPnrCode: String?\n    public let frequentFlyerAirlineDesignator: String?\n    public let selecteeIndicator: Int?\n    public let internationalDocumentVerification: Int?\n    public let marketingCarrierDesignator: String?\n    public let idAdIndicator: String?\n    public let freeBaggageAllowance: String?\n    public let fastTrack: String?\n}\n</code></pre>"},{"location":"Features/BoardingPass/BoardingPass_Index.html#custom-views","title":"Custom Views","text":"<p>The SDK provides default UI solutions for the boarding pass feature flow, as  shown in the following images:</p> <p></p> <p>The use of the preview layout depends on the showPreview flag in the BoardingPassScanParameters. </p> <p>You can also apply your app\u2019s colors and fonts to these layout solutions, to keep your brand\u2019s image consistent. Check Customization tab to learn more about branding of each view.</p> AndroidiOS <pre><code>@Parcelize\nclass BoardingPassCustomViews(\n    val loadingView: Class&lt;out ICustomBoardingPass.LoadingView&gt;? = null\n) : Parcelable\n</code></pre> <p>Our SDK also allows you to pass your own custom views. The only requirement is that your view must implement the SDK view interfaces. For example, if you want to add a custom loading view, your view class must implement the ICustomBoardingPass.LoadingView interface.</p> <pre><code>public class EnrolmentViewRegister {\n    ...\n    public func registerBoardingPassScannerLoadingView(_ viewType: BoardingPassLoadingViewType)\n\n    ...\n}\n</code></pre> <p>Our SDK also allows you to pass your own custom views. The only requirement is that your view must implement the SDK view protocols. For example, if you want to add a custom loading view, your view class must implement the BoardingPassLoadingViewType.</p> <p>In the customization tab you will also find examples to create your own custom views.</p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html","title":"Loading View","text":"<p>The first view of the Boarding pass flow is the loading view, it appears when the boarding pass feature is initializing.</p> <p></p> <p>It contains a title(1), a message(2), an image(3) and a background that can be customized.</p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"boarding_pass_loading_title_sdk_enrolment\"&gt;Loading settings&lt;/string&gt;\n&lt;string name=\"boarding_pass_loading_subtitle_sdk_enrolment\"&gt;It won\\'t take long&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class <pre><code>Theme.shared.strings.boardingPassScan.initialization\nTheme.shared.strings.boardingPassScan.initializationSubtitle\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayFeedbackBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class (It affects all Loading Screens): <pre><code>Theme.shared.colors.checkPermission.title\nTheme.shared.colors.checkPermission.subtitle\n</code></pre> You can change the background color by overriding the following color in Theme class(It affects all Loading Screens): <pre><code>Theme.shared.colors.checkPermission.background\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html#animation","title":"Animation","text":"AndroidiOS <p>You can change the loading animation by adding a raw json animation file with this name: <pre><code>loading_boardingpass_sdk_enrolment\n</code></pre></p> <p>You can change the loading animation by adding a raw json animation file and overriding the following animation name in Theme class <pre><code>Theme.shared.animations.boardingPass.loadingBoardingPass\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_LoadingView.html#use-your-own-layouts","title":"Use your own layouts","text":"AndroidiOS <p>To use your own loading screen for boarding pass feature, you need to implement the MobileID SDK Interface for that view.</p> <p>In this case: ICustomBoardingPass.LoadingView <pre><code>interface LoadingView {\n    fun onPreFeatureLoading()\n    fun onFeatureLoading()\n    fun onPostFeatureLoading()\n    fun hideLoading()\n}\n</code></pre> You can use the functions above to change loading screen texts in runtime, or you can opt to ignore those functions.</p> <p>For example create a class BoardingPassLoadingCustomView, create a layout file and bind it.</p> <pre><code>class BoardingPassLoadingCustomView(context: Context) :\nConstraintLayout(context), ICustomBoardingPass.LoadingView {\nprivate var binding: ViewBoardingPassLoadingBinding\n\n    init {\n        binding = ViewBoardingPassLoadingBinding.inflate(LayoutInflater.from(context), this)\n    }\n\n    override fun onPreFeatureLoading() {\n        // Do nothing\n    }\n\n    override fun onFeatureLoading() {\n        // Do nothing\n    }\n\n    override fun onPostFeatureLoading() {\n        // Do nothing\n    }\n\n    override fun hideLoading() {\n        // Do nothing\n    }\n}\n</code></pre> <p>You need to register a class of type BoardingPassLoadingViewType through the following function of EnrolmentViewRegister <pre><code>public func registerBoardingPassScannerLoadingView(_ viewType: BoardingPassLoadingViewType)\n</code></pre></p> <p>The BoardingPassLoadingViewType class needs to respect the following protocols:</p> <pre><code>public protocol BoardingPassLoadingViewInterface: FeatureLoadingView {}   \n\npublic typealias BoardingPassLoadingViewType = BoardingPassLoadingView.Type\npublic typealias BoardingPassLoadingView = UIView &amp; BoardingPassLoadingViewInterface\n\npublic protocol FeatureLoadingViewInterface {\n    func onPreFeatureLoading()\n    func onPostFeatureLoading()\n    func hideLoading()\n}\n\npublic typealias FeatureLoadingViewType = FeatureLoadingView.Type\npublic typealias FeatureLoadingView = UIView &amp; FeatureLoadingViewInterface\n</code></pre> <p>Example: <pre><code>class LoadingView: BoardingPassLoadingView {\n\n// MARK: - Initialization\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        //add any UI customization you need\n    }\n\n// MARK: - Functions\n\n    func onPreFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func onPostFeatureLoading() {\n        //add any UI customization you need\n    }   \n\n    func hideLoading() {\n        //You can stop animations or other activities that consumes resources \n    }\n}\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_PreviewView.html","title":"Preview View","text":"<p>If the flag showPreview is set to true, then, when the boarding pass is parsed successfully, the preview view is going to show the details of the boarding pass.</p> <p> </p> <p>It contains a title(1), a message(2), a subview(3) containing all boarding pass information, a button(4) to finish the flow and a background that can be customized.</p> <p>The subview is a group that displays all the information collected from the boarding pass.  It contains multiple labels, and beneath each label, it will be displayed the corresponding information.</p> <ol> <li>Passenger name</li> <li>Connection Section</li> <li>Departure</li> <li>Destination</li> <li>Flight number</li> <li>Seat</li> <li>Flight Date</li> </ol>"},{"location":"Features/BoardingPass/BoardingPass_PreviewView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/BoardingPass/BoardingPass_PreviewView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"document_reader_mrzScan_success_title_sdk_enrolment\"&gt;Scanning complete!&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_success_subtitle_sdk_enrolment\"&gt;Your boarding pass has been added.&lt;/string&gt;\n&lt;string name=\"bt_continue_sdk_enrolment\"&gt;Go ahead&lt;/string&gt;\n&lt;!-- Subview labels --&gt;\n&lt;string name=\"boarding_pass_preview_field_name_sdk_enrolment\"&gt;Passenger&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_field_origin_sdk_enrolment\"&gt;Departure&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_field_destination_sdk_enrolment\"&gt;Destination&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_field_flight_number_sdk_enrolment\"&gt;Flight number&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_field_seat_sdk_enrolment\"&gt;Seat&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_field_flight_date_sdk_enrolment\"&gt;Flight date&lt;/string&gt;\n&lt;string name=\"boarding_pass_preview_leg_header_format_sdk_enrolment\"&gt;Connection %d&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class <pre><code>Theme.shared.strings.boardingPassPreview.title\nTheme.shared.strings.boardingPassPreview.subtitle\nTheme.shared.strings.boardingPassPreview.passengerName\nTheme.shared.strings.boardingPassPreview.legHeaderFormat\nTheme.shared.strings.boardingPassPreview.origin\nTheme.shared.strings.boardingPassPreview.destination\nTheme.shared.strings.boardingPassPreview.flightNumber\nTheme.shared.strings.boardingPassPreview.seat\nTheme.shared.strings.boardingPassPreview.flightDate\nTheme.shared.strings.buttons.continue\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_PreviewView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color of the view or the details card by overriding the following color resources: <pre><code>&lt;color name=\"colorBoardingPassBgSdkEnrolment\"&gt;#FDFCFF&lt;/color&gt; &lt;!-- Outside view --&gt;\n&lt;color name=\"colorDocumentPreviewBg\"&gt;#EAEEF6&lt;/color&gt; &lt;!-- Card --&gt;\n</code></pre></p> <p>You can change the buttons text and background color by overriding the following color resources: <pre><code>&lt;color name=\"colorButtonBlueBackgroundTintSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n&lt;color name=\"colorButtonBlueTextSdkEnrolment\"&gt;@android:color/white&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class  <pre><code>Theme.shared.colors.documentData.title // title(1) and message(2)\nTheme.shared.colors.datafield.title\nTheme.shared.colors.datafield.value\nTheme.shared.colors.boardingPassPreview.legHeader // Connection Section (for both text and separate)\n</code></pre> You can change the background color by overriding the following color in Theme class: <pre><code>Theme.shared.colors.boardingPassPreview.background\nTheme.shared.colors.common.backgroundCards // card color (It affects other screens)\n</code></pre> You can change the color of the button (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_PreviewView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Button.Blue\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\nTheme.shared.fonts.medium\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ScanView.html","title":"Scan View","text":"<p>The second view of the Boarding pass flow is the scan view, it's the camera screen that detects the boarding pass barcode.</p> <p></p> <p>It contains a cancel button (1), a title(2), a message(3) and a frame(4) that can be customized.</p>"},{"location":"Features/BoardingPass/BoardingPass_ScanView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/BoardingPass/BoardingPass_ScanView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources <pre><code>&lt;string name=\"boarding_pass_loading_bt_scan_sdk_enrolment\"&gt;Scan boarding pass&lt;/string&gt; &lt;!--Title --&gt;\n&lt;string name=\"boarding_pass_scan_subtitle_sdk_enrolment\"&gt;Looking for barcode or QR code\u2026&lt;/string&gt; &lt;!-- Subtitle --&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class <pre><code>Theme.shared.strings.boardingPassScan.scanTilte\nTheme.shared.strings.boardingPassScan.scanSubtilte\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ScanView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts) <pre><code>&lt;color name=\"colorFaceCaptureTxtLightSdkEnrolment\"&gt;#DFFFFFFF&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource <pre><code>&lt;color name=\"colorBarcodeScanBgSdkEnrolment\"&gt;#000000&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class(affects both title and subtitle): <pre><code>Theme.shared.colors.boardingPassScan.title\n</code></pre> You can change the color of the mask (also affects BiometricFaceCapture): <pre><code>Theme.shared.colors.component.transparentOverlay\n</code></pre> You can change the color of the frame (also affects Face Capture and Document Reader) <pre><code>Theme.shared.colors.common.black\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ScanView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the style we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/BoardingPass/BoardingPass_ScanView.html#images","title":"Images","text":"AndroidiOS <p>You can change the cancel button icon by adding a drawable with this name: <pre><code>ic_cancel_sdk_enrolment.xml\n</code></pre> The image we are using is 24x24dp</p> <p>You can change the frame by adding a drawable with this name: <pre><code>barcode_scan_mask_sdk_enrolment.xml\n</code></pre> The image we are using is 320x320dp</p> <p>You can change the image by adding a asset file and overriding the following image name in Theme class <pre><code>Theme.shared.images.buttons.closeButton // It affects all close buttons\n</code></pre></p>"},{"location":"Features/Common/ComposeSupport.html","title":"Jetpack Compose Custom Views","text":"<p>In Android, there's a new way to create the layouts programmatically using Jetpack compose library. Our layouts are currently in traditional XML files but we also want to give the option to use compose when needed. This page will briefly explain how you can wrap a composable in a xml layout to use it as a custom view.</p>"},{"location":"Features/Common/ComposeSupport.html#create-a-composable-wrapper-layout-file","title":"Create a Composable Wrapper layout file","text":"<p>First we are going to need a layout file that contains a compose view.</p> <p>Since we want to make the whole screen a composable, then it's as simple as adding a Compose View that takes the whole space. Create a new layout file, call it, for example, composable_wrapper.xml and paste the following code there:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;merge\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\ntools:parentTag=\"androidx.constraintlayout.widget.ConstraintLayout\"&gt;\n\n    &lt;androidx.compose.ui.platform.ComposeView\n        android:id=\"@+id/compose_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"&gt;\n\n    &lt;/androidx.compose.ui.platform.ComposeView&gt;\n\n&lt;/merge&gt;\n</code></pre> <p>Now that we have the composable wrapper, this layout file can be used for all the custom views you want to implement.</p> <p>For example, let's implement the document reader loading as a composable custom view.</p>"},{"location":"Features/Common/ComposeSupport.html#create-the-custom-view-class","title":"Create the custom view class","text":"<p>Create a new class, let's call it CustomLoadingView that's going to extend a ConstraintLayout.</p> <p>Paste the following code and make sure to import everything you need.</p> <pre><code>class CustomLoadingView(context: Context) : ConstraintLayout(context), ICustomDocumentReader.LoadingView { \n    private val binding: ComposeWrapperBinding\n    private var isLoading by mutableStateOf(false)\n    private var title by mutableStateOf(\"\")\n    private var message by mutableStateOf(\"\")\n\n    init {\n        binding = ComposeWrapperBinding.inflate(\n            LayoutInflater.from(context),\n            this\n        )\n        binding.composeView.setContent {\n            LoadingViewCompose()\n        }\n    }\n\n    override fun onPreFeatureLoading(message: String) {\n        isLoading = true\n        title = \"Loading...\"\n        this.message = message\n    }\n\n    override fun onPostFeatureLoading() {\n        isLoading = false\n        title = \"\"\n        this.message = \"\"\n    }\n\n    override fun onDownloadProgressChanged(progress: Int) {\n        isLoading = true\n        title = \"Downloading Resources\"\n        this.message = \"Progress: $progress%\"\n    }\n\n    override fun hideLoading() {\n        isLoading = false\n        title = \"\"\n        this.message = \"\"\n    }\n\n    @Composable\n    fun LoadingViewCompose() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            if (isLoading) {\n                // Show loading progress indicator\n                CircularProgressIndicator()\n            }\n            // Show title and message\n            Text(\n                text = title,\n                color = Color.Black,\n                fontSize = 20.sp,\n                textAlign = TextAlign.Center,\n                modifier = Modifier.padding(bottom = 8.dp)\n            )\n            Text(\n                text = message,\n                color = Color.Gray,\n                fontSize = 16.sp,\n                textAlign = TextAlign.Center,\n                modifier = Modifier.padding(bottom = 16.dp)\n            )\n        }\n    }\n}\n</code></pre> <p>Breaking this code down, we have a constraint layout, that implements the loading view contract, changing the values of the spinner, title and message according to what is happening in the moment.  Basically the same we would have with a traditional xml custom view.</p> <p>The difference comes in the composable function, that's a very simple UI to serve as an example.  It contains a spinner which visibility is controlled by a state variable. And two text fields which value will also change during the execution.</p> <p>In the constructor of this class, we make sure to inflate the composable wrapper we added in the first place and pass the composable into the ComposeView.</p>"},{"location":"Features/Common/ComposeSupport.html#pass-the-custom-view-into-the-builder","title":"Pass the custom view into the builder","text":"<p>After this class is created and configured, we need to inject it to the custom views list as we do with regular custom views as well.</p> <pre><code>val enrolmentModule = module {\n    single&lt;IEnrolment&gt; {\n        EnrolmentBuilder.of(\n            context = this@ComposeApp,\n            config = enrolmentConfig\n        ).withDocumentReaderConfig(documentReaderConfig)\n            .withDocumentReaderCustomViews(\n                DocumentReaderCustomViews(\n                    loadingView = CustomLoadingView::class.java\n                )\n            ).build()\n    }\n}\n</code></pre> <p>And that's it, when you run the document reader feature, the loading screen will show up using the UI defined in the composable.</p>"},{"location":"Features/Common/HandleErrors.html","title":"Error handling","text":"<p>From version 7 onwards, the errors management changed in the SDK to make it easier to integrate.</p>"},{"location":"Features/Common/HandleErrors.html#handle-errors-with-sdk-errors-screens","title":"Handle errors with SDK Errors Screens","text":"<p>In every feature of our SDK, there is a default error view that contains a message, a try again button and another button to close the feature. You can use our screens by passing true in the showErrors flag of the feature parameters.</p> <p>You can find additional branding to our errors screens by navigating to the feature -&gt; customization tab -&gt; error view.</p> <p>The FeatureError has the following structure:</p> AndroidiOS <pre><code>/***\n* @param errorType - Enum that classifies the error type\n* @param errorCode - Error code that identifies the error\n* @param description - Error description for log purposes\n* @param publicMessage - Error message suggestion to display in error screens\n*/\n@Parcelize\ndata class FeatureError(\n    val errorType: ErrorType,\n    val errorCode: Int,\n    val description : String,\n    val publicMessage : String = \"\"\n) : Parcelable\n</code></pre> <pre><code>enum class ErrorType {\n    InternalError,\n    CommunicationError,\n    PermissionNotGrantedError,\n    TermsAndConditionsRejected,\n    UserRepeated,\n    UserCanceled,\n    ScanError,\n    ScanTimeout,\n    BoardingPassInvalidError,\n    FaceCaptureError,\n    FaceMatchError,\n    SubjectError,\n    UnknownError\n}\n</code></pre> <pre><code>///\n/// - Parameters:\n///     - errorType: Enum that classifies the error type\n///     - errorCode: Error code that identifies the error\n///     - description: Error description for log purposes\n///     - publicMessage: Error message suggestion to display in error screens\n\npublic class FeatureError: Error {\n    public let errorType: ErrorType\n    public let errorCode: Int\n    public let description: String\n    public let publicMessage: String\n\n    init(errorType: ErrorType, errorCode: Int, description: String, publicMessage: String, name: String) \n}\n\npublic enum ErrorType {\n    case internalError\n    case communicationError\n    case termsAndConditionsRejected\n    case userRepeated\n    case permissionNotGrantedError\n    case scanError\n    case scanTimeout\n    case boardingPassInvalid\n    case faceCaptureError\n    case faceMatchError\n    case subjectError\n    case unknownError\n}\n</code></pre> <p>There's a new property inside FeatureError, called errorType that classifies the type of error. Alongside with the error code and description that are useful for logging and tracing, we also provide a publicErrorMessage that is a suggestion of what you can show the final user as an error message.</p> <p>The value of publicErrorMessage is filled depending on the error type and you can change the default texts or provide additional translations by overriding these strings:</p> AndroidiOS <pre><code>&lt;string name=\"error_internal_sdk_enrolment\"&gt;Oops! There was an unexpected error, please contact support.&lt;/string&gt;\n&lt;string name=\"error_communication_sdk_enrolment\"&gt;There was an error while communicating with the server, please try again.&lt;/string&gt;\n&lt;string name=\"error_android_permission_sdk_enrolment\"&gt;The required permission was not given.&lt;/string&gt;\n&lt;string name=\"error_scan_failed_sdk_enrolment\"&gt;There was an error with the scan, please try again.&lt;/string&gt;\n&lt;string name=\"error_document_reader_timeout_sdk_enrolment\"&gt;Oops! You took too long, please try again.&lt;/string&gt;\n&lt;string name=\"error_boarding_pass_invalid_sdk_enrolment\"&gt;The boarding pass is invalid.&lt;/string&gt;\n&lt;string name=\"error_face_capture_failed_sdk_enrolment\"&gt;We were unable to detect a face, please try again.&lt;/string&gt;\n&lt;string name=\"error_face_match_failed_sdk_enrolment\"&gt;The images don\\'t match, please redo the process.&lt;/string&gt;\n&lt;string name=\"error_subject_failed_sdk_enrolment\"&gt;We were unable to identify the related subject.&lt;/string&gt;\n&lt;string name=\"error_canceled_sdk_enrolment\"&gt;The user chose to cancel the operation.&lt;/string&gt;\n&lt;string name=\"error_repeated_sdk_enrolment\"&gt;The user repeated the operation.&lt;/string&gt;\n&lt;string name=\"error_terms_and_conditions_rejected_sdk_enrolment\"&gt;Unfortunately, since you did not accept the terms and conditions we can\\'t proceed.&lt;/string&gt;\n&lt;string name=\"error_unknown_sdk_enrolment\"&gt;Oops! An unidentified problem occurred, please try again.&lt;/string&gt;\n</code></pre> <pre><code>//internalError\nTheme.shared.strings.errorsPublicMessages.internalError\n//communicationError\nTheme.shared.strings.errorsPublicMessages.communicationError\n//termsAndConditionsRejected\nTheme.shared.strings.errorsPublicMessages.termsAndConditionsRejected\n//userRepeated\nTheme.shared.strings.errorsPublicMessages.userRepeated\n//permissionNotGrantedError\nTheme.shared.strings.errorsPublicMessages.permissionNotGrantedError\n//scanError\nTheme.shared.strings.errorsPublicMessages.scanError\n//scanTimeout\nTheme.shared.strings.errorsPublicMessages.scanTimeout\n//boardingPassInvalid\nTheme.shared.strings.errorsPublicMessages.boardingPassInvalid\n//faceCaptureError\nTheme.shared.strings.errorsPublicMessages.faceCaptureError\n//faceMatchError\nTheme.shared.strings.errorsPublicMessages.faceMatchError\n//subjectError\nTheme.shared.strings.errorsPublicMessages.subjectError\n//unknownError\nTheme.shared.strings.errorsPublicMessages.unknownError\n</code></pre>"},{"location":"Features/Common/HandleErrors.html#handle-errors-in-your-own-activities","title":"Handle errors in your own activities","text":"<p>When you call one of our facade methods, then you will need to pass a completion handler, and it will be called when the result is ready, either successfully or with an error.</p> <p>You can check more details how to obtain the FeatureError object on the \"Handle result\" section of the overview page of each feature.</p> <p>If you choose to use your own activities, then we suggest to handle the errors by type as well:</p> <ul> <li>When it's an internal error, you have to contact VisionBox and share some stacktrace or way to replicate the bug. It usually means that there is some invalid configuration or missing property from our backoffice.</li> <li>Communication errors are mostly caused by internet connection issues, so trying again can solve the problem, it's recommended to allow the user to re-send the request. It can also mean an invalid url of some sort, so if the problem persists you can contact VisionBox.</li> <li>PermissionNotGrantedError means that the user didn't grant permission to use some part of the hardware that is required, as recommended you should have a rationale to explain why that permission is required and block the user from proceeding until he grants the permission.</li> <li>TermsAndConditionsRejected as the name suggests happens when the user rejects the terms and conditions, should be presented a rationale explaining why it's needed.</li> <li>User repeated and user canceled are not exactly errors, they are just warnings to inform that the user wants to try again or canceled the operation.</li> <li>Scan error happens when there is a regula error or any error with the scan of the boarding pass, this usually requires debugging, so it's recommended to share the stacktrace and communicate to VisionBox.</li> <li>Scan timeout it means that the timer of document reader reached the end and it wasn't possible to capture the document, you can inform the user of that, suggesting how he should scan the document (on the table, with a high contrast from the table, with the proper angle etc..) and let the user try again.</li> <li>Boarding pass invalid means that the scan or parse of the boarding pass was correct but some issues were found. Can be the format that is not supported by us, or simply it's not actually a boarding pass barcode.</li> <li>FaceCaptureError means that the feature failed, either due to our quality tests failing, and in that case you will receive a report saying which tests failed, or liveness service failed due to the quality of the image or being a image of an image and not a real person.</li> <li>SubjectError happens when the subject action the user was trying to make failed. eg: User tried to add an invalid subject.</li> <li>Unknown errors should not happen but any error that we have unmapped will return unknown error and must be reported for investigation.</li> </ul>"},{"location":"Features/DocumentReader/DocumentReader_ErrorView.html","title":"Error View","text":"<p>In case any error happens in the Document Error flow and the flag showErrors is active, the Error View will appear in order to give the final user feedback as to may have gone wrong, allowing them to retry or cancel.</p> <p></p> <p>It contains a close button(1), a title(2), a message(3), an image(4), a retry button (5) and a background that can be customized.</p> <p>The subtitle text will be the description of the error.</p>"},{"location":"Features/DocumentReader/DocumentReader_ErrorView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_ErrorView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"feature_failure_title_sdk_enrolment\"&gt;There\\'s something wrong&lt;/string&gt;\n&lt;string name=\"try_again_sdk_enrolment\"&gt;Try again&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class for the title <pre><code>Theme.shared.strings.common.failureTitle\n</code></pre></p> <p>The message field cannot be overridden at this time as it displays dynamic messages</p> <p>You can override the following string keys, for the button title (It affects all error views) <pre><code>Theme.shared.strings.buttons.tryAgain\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_ErrorView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorOverlayInvalidTxtSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayInvalidBgSdkEnrolment\"&gt;#F1F0F4&lt;/color&gt;\n</code></pre></p> <p>You can change the buttons text and background color by overriding the following color resources: <pre><code>&lt;color name=\"colorButtonBlueBackgroundTintSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n&lt;color name=\"colorButtonBlueTextSdkEnrolment\"&gt;@android:color/white&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class  <pre><code>Theme.shared.colors.faceCapture.titleDark// title(2) and message(3) (It affects other screens)\n</code></pre> You can change the background color by overriding the following color in Theme class: <pre><code>Theme.shared.colors.faceCapture.background (It affects other screens)\n</code></pre> You can change the color of the close button(1) (It affects other screens) <pre><code>Theme.shared.colors.common.black\n</code></pre> You can change the color of the button (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_ErrorView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Button.Blue\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_ErrorView.html#image","title":"Image","text":"AndroidiOS <p>You can change the image by adding a drawable with this name: <pre><code>ic_passport_gray.xml\n</code></pre> The image we are using is 120x120dp.</p> <p>You can change the cancel button icon by adding a drawable with this name: <pre><code>ic_close.xml\n</code></pre> The image we are using is 24x24dp.</p> <p>You can change the image by adding a asset file and overriding the following image name in Theme class <pre><code>Theme.shared.images.buttons.closeButton // It affects all close buttons\nTheme.shared.images.documentReader.passportError\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html","title":"Find Chip View","text":"<p>It contains a title(1), a message(2), an animation(3), a skip Button(4) and a background that can be customized. </p>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html#text-resources","title":"Text resources","text":"<p>You can add your own texts and localization by overriding the following string resources:</p> <pre><code>&lt;resources&gt;\n    &lt;string name=\"rfid_read_title_sdk_enrolment\"&gt;Find document chip&lt;/string&gt;\n    &lt;string name=\"rfid_read_subtitle_sdk_enrolment\"&gt;Slowly move your phone on top of your document to align the phone antenna and document chip&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html#colors","title":"Colors","text":"<p>You can change the colors of text elements and the background by overriding the following color resource (It affects all texts):</p> <pre><code>&lt;resources&gt;\n    &lt;!-- Change the text color --&gt;\n    &lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n    &lt;!-- Change the background color --&gt;\n    &lt;color name=\"colorDocumentReadRFIDBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html#styles","title":"Styles","text":"<p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;resources&gt;\n    &lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;&lt;/style&gt;\n    &lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;&lt;/style&gt;\n&lt;/resources&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html#animation","title":"Animation","text":"<p>You can change the animation by adding a raw json animation file with this name:</p> <ul> <li>chip_read_reading_sdk_enrolment.json</li> </ul>"},{"location":"Features/DocumentReader/DocumentReader_FindChipView_Android.html#use-your-own-layouts","title":"Use your own layouts","text":"<p>To use your own custom screens for document reader feature, you need to implement the MobileID SDK Interface for that view. In this case: ICustomDocumentReader.RfidSearchView <pre><code>interface RfidSearchView {\n    fun getSkipButton(): View?\n    fun hideSearch()\n}\n</code></pre></p> <p>getSkipButton should return a button view to allow the user to skip Chip reading, if you don't want this to be possible, simply return null here. hideSearch is called when the view is dismissed to allow you to clean your variables and stop animations. </p> <p>For example create a class RfidReadCustomView, create a layout file and bind it.</p> <pre><code>class RfidReadCustomView(\n    context: Context\n) : ConstraintLayout(context), ICustomDocumentReader.RfidReadView {\n    private var binding: ViewRfidReadBinding\n\n    init {\n        binding = ViewRfidReadBinding.inflate(LayoutInflater.from(context), this)\n    }\n\n    override fun getSkipButton() = binding.btnSkip\n    override fun hideSearch() {\n        // Do nothing\n    }\n}\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_Index.html","title":"Document Reader","text":"<p>The document reader is used to extract the user\u2019s document information and perform all necessary security validations. This functionality works in two steps: the MRZ of the travel document is scanned (using the device's camera) and then, if it is an electronic document (i.e. with a chip), and the client app indicated that it wants to read the chip, the user is prompted to place the mobile device over the travel e-Document in order to perform a RFID scan to extract available data.</p>"},{"location":"Features/DocumentReader/DocumentReader_Index.html#configure","title":"Configure","text":"<p>To use this feature, you must provide the DocumentReaderConfig to the EnrolmentBuilder like the following example:</p> AndroidiOS <pre><code>val builder: EnrolmentBuilder = EnrolmentBuilder\n    .of(context, config)\n    .withDocumentReaderConfig(documentReaderConfig)\n    .build()\n</code></pre> <pre><code>var enrolment: EnrolmentProtocol = EnrolmentBuilder\n        .of(enrolmentConfig: enrolmentConfig)\n        .with(documentReaderConfig: documentReaderConfig)\n        .with(viewRegister: viewRegister)\n        .build()\n</code></pre> <p>The DocumentReaderConfig has the following structure:</p> AndroidiOS <pre><code>@Parcelize\ndata class DocumentReaderConfig(\n  val multipageProcessing: Boolean,\n  val databaseId: String\n) : Parcelable\n</code></pre> <ul> <li>multipageProcessing: controls the workflow for documents that might need to have different pages scanned;</li> <li>databaseId: specify database Id to be used with the document reader functionality (provided by Regula);</li> </ul> <pre><code>public struct DocumentReaderConfig {\n    public let multipageProcessing: Bool\n    public let databaseID: String\n    public let databasePath: String?\n    public let scannerTimeout: TimeInterval\n\n    public init(multipageProcessing: Bool, databaseID: String, databasePath: String? = nil, scannerTimeout: TimeInterval = 30) \n}\n</code></pre> <ul> <li>multipageProcessing: controls the workflow for documents that might need to have different pages scanned;</li> <li>databaseId: specify database Id to be used with the document reader functionality (provided by Regula);</li> <li>databasePath: Database path for .dat file to initialize Regula documents database. Default value is <code>nil</code>.</li> <li>scannerTimeout: Document scan timeout, in seconds. Default value is <code>30</code> seconds.</li> </ul>"},{"location":"Features/DocumentReader/DocumentReader_Index.html#initiate-scan","title":"Initiate Scan","text":"<p>The document reader functionality enables the client application to extract and validate data from travel documents from different countries, by calling the readDocument method.</p> AndroidiOS <pre><code>/**\n * Reads the information contained in a personal document.     *\n *\n * @param context Context\n * @param params [DocumentReaderParameters] with some configurations for the document reader feature.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results.\n */\nfun readDocument(\n    context: Context,\n    params: DocumentReaderParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>    func readDocument(parameters: ReadDocumentParameters, \n                      viewController: UIViewController, \n                      completionHandler: @escaping (Result&lt;DocumentReaderReport, DocumentReaderError&gt;) -&gt; Void) throws\n</code></pre> <p>This method can perform a full travel document read in two steps:</p> <ul> <li>MRZ scan: using the device's camera, the SDK reads the MRZ section of the travel document and   extracts information from it. During this step, and if available, a document picture is also   scanned and saved.</li> <li>RFID scan: the user is prompted to move the device over the e-Document and, using NFC, the chip   data is scanned. This step is available only for electronic documents (i.e. with a chip) and is   optional (i.e. the client app must indicate that it wants to read the document's chip, setting the   readRFID flag to true when calling the readDocument method). You can use specific parameters when   using this functionality for passport scanning. Below is an example on how to provide those   parameters:</li> </ul> AndroidiOS <pre><code>data class DocumentReaderParameters(\n    val showPreview: Boolean,\n    val showErrors: Boolean,\n    val rfidRead: Boolean,\n    val showSecurityCheck: Boolean = true,\n    val showRFIDStatus: Boolean = false,\n    val mrzReadTimeout: Long = TimeUnit.SECONDS.toMillis(30),\n    val rfidReadTimeout: Long = TimeUnit.SECONDS.toMillis(30),\n    val showRFIDInstructions: Boolean = true,\n) : Parcelable {\ninit {\n    require(!(mrzReadTimeout &lt; TimeUnit.SECONDS.toMillis(10) || mrzReadTimeout &gt; TimeUnit.SECONDS.toMillis(60))) { \"mrzReadTimeout value must be between 10 and 60 seconds.\" }\n    require(!(rfidReadTimeout &lt; TimeUnit.SECONDS.toMillis(10) || rfidReadTimeout &gt; TimeUnit.SECONDS.toMillis(60))) { \"rfidReadTimeout value must be between 10 and 60 seconds.\" }\n}\n</code></pre> <pre><code>public struct ReadDocumentParameters {\n    public let showPreview: Bool\n    public let readRFID: Bool\n    public let showRFIDStatus: Bool\n    public let scannerTimeout: TimeInterval\n    public let rfidTimeout: TimeInterval\n    public let showErrors: Bool\n    public let showRFIDInstructions: Bool\n\n    public init(showPreview: Bool,\n                readRFID: Bool,\n                showRFIDStatus: Bool = false,\n                scannerTimeout: TimeInterval = 30,\n                rfidTimeout: TimeInterval = 30,\n                showRFIDInstructions: Bool = true,\n                showErrors: Bool)\n}\n</code></pre> <p>Both mrzReadTimeout and rfidReadTimeout values must be between 10 and 60 seconds, otherwise an illegal argument exception will be thrown. It's no longer possible to disable either of this timeout.</p> <p>If both scans are enabled and the RFID scan fails for some reason, the MRZ scan data is always returned as the default set of data read from the travel document. The mrzReadTimeout is the timeout value in seconds before closing the document reading screen if no document is scanned during this period. The functionality provides UI solution for both document scanning and returned data preview (as shown in the following images), with an option to retry the scan. The preview is only shown if the flag showPreview in the DocumentReaderParameters is set to true when calling the readDocument method. The showRFIDStatus is a flag to show an icon in the preview screen that indicates if the document was scanned using RFID and properly validated and authenticated. The showSecurityCheck is used to activate a security mechanism to protect user data in the preview screen. If it is true, the device will use its own locking mechanism in this screen and the user will need to authenticate and unlock his device to check the preview data (for example, using fingerprint or face ID).</p> <p>The showRFIDInstructions field, when set to false, allows the RFID Scan to start automatically as soon as the document has been read using OCR successfully, not showing the instructions screen when using it nor giving the chance to skip rfid scan.</p>"},{"location":"Features/DocumentReader/DocumentReader_Index.html#handle-result","title":"Handle Result","text":"<p>Here is how you can get the document reader report and handle the result for document reader:</p> AndroidiOS <p>You can get the result by using the result launcher that's passed as the final parameter: <pre><code>private val documentReaderResultLauncher = registerForActivityResult(DocumentReaderResultLauncher())\n{ result: DocumentReaderActivityResult -&gt;\n    when {\n        result.success -&gt; onSuccess(result.documentReaderReport)\n        result.documentReaderError?.userCanceled == true -&gt; userCancelled()\n        result.documentReaderError?.termsAndConditionsAccepted == false -&gt; onTermsAndConditionsRejected()\n        else -&gt; onDocumentReaderError()\n    }\n}\n</code></pre></p> <p>You will receive a model of the type DocumentReaderActivityResult that will contain the success data (in this case a DocumentReaderReport) or the error data.</p> <pre><code>data class DocumentReaderActivityResult(\n    val documentReaderReport: DocumentReaderReport?,\n    val documentReaderError: DocumentReaderError?\n) {\n    val success get() = documentReaderReport != null\n}\n</code></pre> <p>The DocumentReaderError has the following structure:</p> <pre><code>data class DocumentReaderError(\n    val userCanceled: Boolean,\n    val termsAndConditionsAccepted: Boolean,\n    val featureError: FeatureError?,\n)\n</code></pre> <p><pre><code>self.enrolment.readDocument( parameters: parameters, viewController: view) { [weak self] result in\n    switch result {\n        case .success(let documentReaderReport):\n           // handle DocumentReaderReport\n\n        case .failure(let error):\n            EnrolmentData.shared.documentReaderReport = nil\n            if error.userCanceled {\n                print(\"onUserCancel\")\n            } else {\n                print(error.featureError.publicMessage)\n            }\n        }\n    }\n}\n</code></pre> The DocumentReaderError has the following structure:</p> <pre><code>public class DocumentReaderError: Error {\n    public var userCanceled: Bool\n    public var termsAndConditionsAccepted: Bool\n    public var featureError: FeatureError\n}\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_Index.html#document-reader-report","title":"Document Reader Report","text":"AndroidiOS <pre><code>@Parcelize\ndata class DocumentReaderReport(\n    val documentData: DocumentData,\n    val status: List&lt;DocumentDataStatus&gt;,\n    val rfidStatus: RFIDStatus,\n    val documentType: DocumentType,\n    val documentPhotoHash: String,\n    val documentDataHash: String,\n) : Parcelable\n</code></pre> <pre><code>public struct DocumentReaderReport: Codable {\n    public let documentData: DocumentData\n    public let documentType: DocumentType\n    public let documentRFIDStatus: DocumentRFIDStatus\n    public let documentStatuses: [DocumentDataStatus]\n    public let documentPhotoHash: String?\n    public let documentDataHash: String?\n}\n</code></pre> <p>The <code>DocumentReaderReport</code> includes two hash fields that that are used to verify data integrity when building a Subject.</p> <p>The DocumentData contains the document data. You can check the structure here:</p> AndroidiOS <p><pre><code>data class DocumentData(\n    val hasChip: Boolean,\n    val documentNumber: DocumentDataField?,\n    val dateOfExpiry: Date?,\n    val dateOfBirth: Date?,\n    val age: DocumentDataField?,\n    val personalNumber: DocumentDataField?,\n    val sex: DocumentDataField?,\n    val issuingStateCode: DocumentDataField?,\n    val issuingState: DocumentDataField?,\n    val dateOfIssue: Date?,\n    val nationalityCode: DocumentDataField?,\n    val nationality: DocumentDataField?,\n    val givenNames: DocumentDataField?,\n    val surname: DocumentDataField?,\n    val surnameAndGivenNames: DocumentDataField?,\n    val documentClassCode: DocumentDataField?,\n    val documentNumberCheckDigit: DocumentDataField?,\n    val dateOfBirthCheckDigit: DocumentDataField?,\n    val dateOfExpiryCheckDigit: DocumentDataField?,\n    val optionalDataCheckDigit: DocumentDataField?,\n    val finalCheckDigit: DocumentDataField?,\n    val optionalData: DocumentDataField?,\n    val cardAccessNumber: DocumentDataField?,\n    val remainderTerm: DocumentDataField?,\n    val mrzType: DocumentDataField?,\n    val mrzStrings: DocumentDataField?,\n    val mrzStringsWithCorrectCheckSums: DocumentDataField?,\n    val dsCertificateSubject: DocumentDataField?,\n    val dsCertificateValidFrom: DocumentDataField?,\n    val dsCertificateValidTo: DocumentDataField?,\n    val documentImagePath: String,\n    val portraitPhotoPath: String,\n    val documentTypeData: DocumentTypeData?,\n    val chipPage: Int\n)\n</code></pre> <pre><code>data class DocumentDataField(\n    val value: String,\n    var status: DocumentDataFieldStatus\n)\n</code></pre> <pre><code>enum class DocumentDataFieldStatus {\n    /**\n     * field was verified and passed verification successfully.\n     */\n    OK,\n\n    /**\n     * verification of the field has failed for some non-specified reason, either it wasn't read correctly or\n     * the check digit verification failed. These data are not reliable and should not be used.\n     */\n    ERROR,\n\n    /**\n     * field was not verified for correctness.\n     */\n    NOT_CHECKED\n}\n</code></pre> <pre><code>@Parcelize\n    data class DocumentTypeData(\n    val type: DocumentType,\n    val infoVal: DocumentTypeInfo?\n) : Parcelable    \n</code></pre> <pre><code>enum class DocumentType { \n    PASSPORT, \n    VISA, \n    ID_CARD, \n    DRIVING_LICENSE, \n    UNKNOWN\n}\n</code></pre> <pre><code>@Parcelize\ndata class DocumentTypeInfo(\n    val documentId: Int,\n    val dTypeId: Int,\n    val documentName: String?,\n    val icaoCode: String?\n) : Parcelable   \n</code></pre></p> <p>The DocumentDataStatus, RFIDStatus and DocumentType are enums that have the following possibilities:</p> <p><pre><code>enum class DocumentDataStatus {\n    OK, \n    VALIDATION_ERROR, \n    EXPIRED_DOCUMENT,\n    RFID_PASSIVE_AUTHENTICATION,\n    MRZ_RFID_MISMATCH, \n    RFID_TIMEOUT, \n    RFID_PERMISSION_NOT_GRANTED, \n    RFID_TAG_NOT_FOUND, \n    RFID_NFC_NOT_SUPPORTED, \n    RFID_GENERIC_ERROR, \n    USER_SKIPPED_RFID\n}\n</code></pre> <pre><code>enum class RFIDStatus {\n    UNDEFINED, \n    SUCCESS, \n    ERROR\n}\n</code></pre></p> <p><pre><code>public class DocumentData: Codable {\n    /// Indicates if the document has chip.\n    public var hasChip: Bool = false\n    /// Document number.\n    public var documentNumber: DocumentDataField?\n    /// Expiry date of the document.\n    public var dateOfExpiry: Date?\n    /// Date of birth.\n    public var dateOfBirth: Date?\n    /// Age.\n    public var age: DocumentDataField?\n    /// Personal number.\n    public var personalNumber: DocumentDataField?\n    /// Sex.\n    public var sex: DocumentDataField?\n    /// Issuing state code in compliance with 3166-1 standard (ICAO doc 9303).\n    public var issuingStateCode: DocumentDataField?\n    /// Human-readable name of the issuing country, according to the current locale.\n    public var issuingState: DocumentDataField?\n    /// Date of issue.\n    public var dateOfIssue: Date?\n    /// Nationality code in compliance with ISO3166-1 standard (ICAO doc 9303).\n    public var nationalityCode: DocumentDataField?\n    /// Human-readable name of nationality country of the document holder, according to the current locale.\n    public var nationality: DocumentDataField?\n    /// Given name(s).\n    public var givenNames: DocumentDataField?\n    /// Surname.\n    public var surname: DocumentDataField?\n    /// Surname and given name(s).\n    public var surnameAndGivenNames: DocumentDataField?\n    /// Document class code.\n    public var documentClassCode: DocumentDataField?\n    /// Check digit for document number.\n    public var documentNumberCheckDigit: DocumentDataField?\n    /// Check digit for date of birth.\n    public var dateOfBirthCheckDigit: DocumentDataField?\n    /// Check digit for document expiry date.\n    public var dateOfExpiryCheckDigit: DocumentDataField?\n    /// Check digit for optional data.\n    public var optionalDataCheckDigit: DocumentDataField?\n    /// Final check digit (for the whole MRZ).\n    public var finalCheckDigit: DocumentDataField?\n    /// Optional data.\n    public var optionalData: DocumentDataField?\n    /// Access number for RFID chip.\n    public var cardAccessNumber: DocumentDataField?\n    /// Months to expire.\n    public var remainderTerm: DocumentDataField?\n    /// MRZ type (ID-1 \u2013 0, ID-2 \u2013 1, ID-3 \u2013 2).\n    public var mrzType: DocumentDataField?\n    /// MRZ lines.\n    public var mrzStrings: DocumentDataField?\n    /// MRZ with correct checksums.\n    public var mrzStringsWithCorrectCheckSums: DocumentDataField?\n    /// Textual information about the document issuer.\n    public var dsCertificateSubject: DocumentDataField?\n    /// Start date of the DS-certificate validity.\n    public var dsCertificateValidFrom: DocumentDataField?\n    /// Expiration date of the DS-certificate.\n    public var dsCertificateValidTo: DocumentDataField?\n\n    /// Model that wraps information about the document type\n    public var documentTypeData: DocumentTypeData?\n\n    /// Photo of the document owner.\n    public var portrait: UIImage? {\n        return portraitData.flatMap { UIImage(data: $0) }\n    }\n\n    /// Document image.\n    public var documentImage: UIImage? {\n        return documentImageData.flatMap { UIImage(data: $0) }\n    }\n\n    var documentImageData: Data?\n\n    var portraitData: Data?\n}\n</code></pre> <pre><code>public struct DocumentDataField: Codable {\n    public var value: String\n    public var status: DocumentDataFieldStatus\n}\n</code></pre> <pre><code>public enum DocumentDataFieldStatus: String, Codable {\n    /// The field was verified and passed verification successfully.\n    case ok\n    /// The verification of the field has failed for some non-specified reason, either it wasn't read correctly or the check digit verification failed.\n    /// These data are not reliable and should not be used.\n    case error\n    /// The field was not verified for correctness.\n    case notChecked\n}\n</code></pre> <pre><code>public struct DocumentTypeData: Codable {\n    /// Type of document, ex: Passport, Visa, etc.\n    public let type: DocumentType\n    /// Model that contains information about the document type\n    public let info: DocumentTypeInfo?\n}\n</code></pre> <pre><code>public struct DocumentTypeInfo: Codable {\n    /// Document type id\n    public let dTypeId: Int\n    /// Document Name\n    public let documentName: String?\n    /// Country code\n    public let icaoCode: String?\n}\n</code></pre> <pre><code>public enum DocumentType: String, Codable {\n    case passport\n    case visa\n    case idCard\n    case drivingLicense\n    case unknown\n}\n</code></pre></p> <p>The DocumentRFIDStatus, DocumentDataStatus and DocumentType are enums that have the following possibilities:</p> <p><pre><code>public enum DocumentType: String, Codable {\n    case passport\n    case visa\n    case idCard\n    case drivingLicense\n    case unknown\n}\n</code></pre> <pre><code>public enum DocumentRFIDStatus: String, Codable {\n    case error\n    case success\n    case undefined\n}\n</code></pre> <pre><code>public enum DocumentDataStatus: String, Codable {\n    case ok\n    case validationError\n    case expiredDocument\n    case rfidPassiveAuthentication\n    case mrzRFIDMismatch\n    case rfidNFCNotSupported\n    case rfidGenericError\n    case rfidTimeouError\n    case userSkipedRfid\n}\n</code></pre></p> <p>The <code>chipPage</code> indicates the presence and location of an RFID chip. 0 - No RFID chip. 1 - Chip is located in the document data page. 2 - Chip is located in the back page or inlay of the document.</p>"},{"location":"Features/DocumentReader/DocumentReader_Index.html#documentreadercustomviews","title":"DocumentReaderCustomViews","text":"<p>The SDK provides default UI solutions for the document reader feature flow, as shown in the following images: </p> <p>The use of the preview layout depends on the showPreview flag in the DocumentReaderParameters.</p> <p>The use of the rfid related layouts depends on the rfidRead flag in the DocumentReaderParameters.</p> <p>The use of the error layout depends on the showErrors flag in the DocumentReaderParameters.</p> <p>You can also apply your app\u2019s colors and fonts to these layout solutions, to keep your brand\u2019s image consistent. Check Customization tab to learn more about branding of each view.</p> AndroidiOS <p><pre><code>@Parcelize\nclass DocumentReaderCustomViews(\n    val loadingView: Class&lt;out ICustomDocumentReader.LoadingView&gt;? = null,\n    val rfidInstructionsView: Class&lt;out ICustomDocumentReader.RfidInstructionsView&gt;? = null,\n    val rfidSearchView: Class&lt;out ICustomDocumentReader.RfidSearchView&gt;? = null,\n    val rfidProcessView: Class&lt;out ICustomDocumentReader.RfidProcessView&gt;? = null,\n) : Parcelable\n</code></pre> You can use your own custom views in the document reader functionality. Your view must implement the SDK view interfaces. For example, if you want to add a custom loading view, your view class must implement the ICustomDocumentReader.LoadingView interface.</p> <pre><code>public class EnrolmentViewRegister {\n    ...\n    // MARK: - Document Reader\n    public func registerDocumentReaderRFIDInstructionsView(_ viewType: DocumentReaderRFIDInstructionsViewType)\n    public func registerDocumentReaderLoadingView(_ viewType: DocumentReaderLoadingViewType)\n    ...\n}    \n</code></pre> <p>Our SDK also allows you to pass your own custom views. The only requirement is that your view must implement the SDK view protocols. For example, if you want to add a custom loading view, your view class must implement the DocumentReaderLoadingViewType.</p> <p>In the customization tab you will also find examples to create your own custom views.</p>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html","title":"Loading View","text":"<p>The first view of the document reader flow is the loading view, it appears when the feature is initializing. In this step, if the regula database is not yet downloaded or it's outdated, the download will begin automatically.</p> <p></p> <p>It contains a title(1), a message(2), an animation(3) and a background that can be customized. </p>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"document_reader_loading_overlay_title_sdk_enrolment\"&gt;Loading Document Reader&lt;/string&gt;\n&lt;string name=\"document_reader_initializing_overlay_message_sdk_enrolment\"&gt;This may take a moment&lt;/string&gt;\n&lt;!-- In case the regula database needs to be downloaded we show the progress in text --&gt;\n&lt;string name=\"document_read_reader_download_progress_sdk_enrolment\"&gt;Downloading resources: %d%%&lt;/string&gt;\n&lt;!-- When the feature is ready to start we display this message in the subtitle --&gt;\n&lt;string name=\"document_reader_loading_overlay_subtitle_sdk_enrolment\"&gt;We\\'ll first take a picture of your document&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class</p> <pre><code>Theme.shared.strings.documentReader.initialization\nTheme.shared.strings.documentReader.initializationSubtitle\nTheme.shared.strings.documentReaderdownloadProgress\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayFeedbackBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class (It affects all Loading Screens):</p> <pre><code>Theme.shared.colors.checkPermission.title\nTheme.shared.colors.checkPermission.subtitle\n</code></pre> <p>You can change the background color by overriding the following color in Theme class(It affects all Loading Screens):</p> <pre><code>Theme.shared.colors.checkPermission.background\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html#animation","title":"Animation","text":"AndroidiOS <p>You can change the loading animation by adding a raw json animation file with this name: <pre><code>loading_document_reader_sdk_enrolment.json\n</code></pre></p> <p>You can change the loading animation by adding a raw json animation file and overriding the following animation name in Theme class <pre><code>Theme.shared.animations.documentReader.loadingDocuments\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_LoadingView.html#use-your-own-layouts","title":"Use your own layouts","text":"AndroidiOS <p>To use your own loading screen for document reader feature, you need to implement the MobileID SDK Interface for that view.</p> <p>In this case: ICustomDocumentReader.LoadingView <pre><code>interface LoadingView {\n    fun onPreFeatureLoading(message: String)\n    fun onPostFeatureLoading()\n    fun onDownloadProgressChanged(progress: Int)\n    fun hideLoading()\n}\n</code></pre> In this screen, the loading time can deppend on the status of the database and wether it's the first feature to be called or not. Due to this, we have 4 methods were you can update the messages being displayed in the loading screen, or you can opt to ignore those functions.</p> <p>onPreFeatureLoading is called multiple times, with different messages that display what is happening while initializing the feature. onPostFeatureLoading is called when the transaction is being registered. onDownloadProgressChanged is called when the database download is in progress so you can share the progress with the user. hideLoading is called when the view is dismissed.</p> <p>For example create a class DocumentReaderLoadingCustomView, create a layout file and bind it.</p> <pre><code>class DocumentReaderLoadingCustomView(\ncontext: Context\n) : ConstraintLayout(context), ICustomDocumentReader.LoadingView {\nprivate var binding: ViewDocumentReaderLoadingBinding\n\n    init {\n        binding = ViewDocumentReaderLoadingBinding.inflate(LayoutInflater.from(context), this)\n    }\n\n    override fun onPreFeatureLoading(message: String) {\n        binding.documentReadLoadingMessage.text = message\n    }\n\n    override fun onPostFeatureLoading() {\n        binding.documentReadLoadingTitle.text = \"Communicating\"\n        binding.documentReadLoadingMessage.text = \"\"\n    }\n\n    override fun onDownloadProgressChanged(progress: Int) {\n        binding.documentReadLoadingMessage.text = \"Progress: $progress%\"\n    }\n\n    override fun hideLoading() {\n        // Do nothing\n    }\n}\n</code></pre> <p>You need to register a class of type DocumentReaderLoadingViewType through the following function of EnrolmentViewRegister <pre><code>public func registerDocumentReaderLoadingView(_ viewType: DocumentReaderLoadingViewType)\n</code></pre></p> <p>The DocumentReaderLoadingViewType class needs to respect the following protocols:</p> <pre><code>public protocol FeatureLoadingViewInterface {\n    func onPreFeatureLoading()\n    func onPostFeatureLoading()\n    func hideLoading()\n}\n\npublic typealias FeatureLoadingViewType = FeatureLoadingView.Type\npublic typealias FeatureLoadingView = UIView &amp; FeatureLoadingViewInterface\n\npublic protocol DocumentReaderLoadingViewInterface: FeatureLoadingView {\n    func onDownloadProgressChanged(progress: Int)\n    func onPreparingFeature()\n}\n\npublic typealias DocumentReaderLoadingViewType = DocumentReaderLoadingView.Type\npublic typealias DocumentReaderLoadingView = UIView &amp; DocumentReaderLoadingViewInterface\n</code></pre> <p>Example: <pre><code>class LoadingView: DocumentReaderLoadingView {\n\n    // MARK: - Initialization\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        //add any UI customization you need\n    }\n\n    // MARK: - Functions\n\n    func onDownloadProgressChanged(progress: Int) {\n        //add any UI customization you need\n    }\n\n    func onPreparingFeature() {\n        //add any UI customization you need\n    }\n\n    func onPreFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func onPostFeatureLoading() {\n        //add any UI customization you need\n    }   \n\n    func hideLoading() {\n        //You can stop animations or other activities that consumes resources \n    }\n}\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_PreviewView.html","title":"Preview View","text":"<p>If the flag showPreview is set to true, then, when the Document is read successfully, the preview view is going to show the details of the document.</p> <p></p> <p>This screen can have 4 states, in all of them the OCR reading was successful but the chip can have several states from left to right:</p> <ul> <li>Chip reading error</li> <li>User skipped chip reading</li> <li>Successful chip reading (does not have the message label)</li> <li>It is not an e-Document (does not have the message label)</li> </ul> <p>It contains a title(1), a message(2), a subview(3) containing all document information, a retry button(4) to read the document again, a continue button(5) to finish the flow and a background that can be customized.</p> <p></p> <p>The subview is a group that displays all the information collected from the document.  It contains multiple labels, and beneath each label, it will be displayed the corresponding information.</p> <ol> <li>Given names</li> <li>Surname</li> <li>Chip status</li> <li>Doc. class code</li> <li>Document nr.</li> <li>Date of birth</li> <li>Expiry date</li> <li>Personal number</li> <li>Gender</li> <li>Issuing state code</li> <li>Issuing state name</li> <li>Nationality code</li> <li>Nationality</li> <li>Given names</li> <li>Surname</li> <li>Optional data</li> <li>MRZ</li> <li>See/Hide details button</li> </ol>"},{"location":"Features/DocumentReader/DocumentReader_PreviewView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_PreviewView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;!-- Document Preview Titles --&gt; \n&lt;string name=\"document_reader_mrzScan_success_title_sdk_enrolment\"&gt;Scanning complete!&lt;/string&gt;\n&lt;string name=\"document_reader_rfid_success_title_sdk_enrolment\"&gt;Chip read complete!&lt;/string&gt;\n&lt;string name=\"document_reader_rfid_skipped_title_sdk_enrolment\"&gt;Chip read skipped&lt;/string&gt;\n&lt;string name=\"document_reader_mrzScan_failure_title_sdk_enrolment\"&gt;Something went wrong&lt;/string&gt;\n&lt;!-- Document Data --&gt; \n&lt;string name=\"document_data_field_document_number_sdk_enrolment\"&gt;Document nr:&lt;/string&gt;\n&lt;string name=\"document_data_field_expiry_date_sdk_enrolment\"&gt;Expiry date:&lt;/string&gt;\n&lt;string name=\"document_data_field_date_of_birth_sdk_enrolment\"&gt;Date of birth:&lt;/string&gt;\n&lt;string name=\"document_data_field_nationality_sdk_enrolment\"&gt;Nationality:&lt;/string&gt;\n&lt;string name=\"document_data_field_personal_number_sdk_enrolment\"&gt;Personal number:&lt;/string&gt;\n&lt;string name=\"document_data_field_issuing_state_name_sdk_enrolment\"&gt;Issuing state name:&lt;/string&gt;\n&lt;string name=\"document_data_field_doc_class_code_sdk_enrolment\"&gt;Doc. class code:&lt;/string&gt;\n&lt;string name=\"document_data_field_issuing_state_code_sdk_enrolment\"&gt;Issuing state code:&lt;/string&gt;\n&lt;string name=\"document_data_field_gender_sdk_enrolment\"&gt;Gender:&lt;/string&gt;\n&lt;string name=\"document_data_field_surname_sdk_enrolment\"&gt;Surname:&lt;/string&gt;\n&lt;string name=\"document_data_field_given_names_sdk_enrolment\"&gt;Given names:&lt;/string&gt;\n&lt;string name=\"document_data_field_nationality_code_sdk_enrolment\"&gt;Nationality code:&lt;/string&gt;\n&lt;string name=\"document_data_field_optional_data_sdk_enrolment\"&gt;Optional data:&lt;/string&gt;\n&lt;string name=\"document_data_field_mrz_sdk_enrolment\"&gt;MRZ:&lt;/string&gt;\n&lt;string name=\"document_data_field_sex_and_age_format_sdk_enrolment\"&gt;%1$s, Age: %2$s&lt;/string&gt;\n&lt;!-- Buttons --&gt;\n&lt;string name=\"bt_hide_details_sdk_enrolment\"&gt;Hide details&lt;/string&gt;\n&lt;string name=\"bt_see_details_sdk_enrolment\"&gt;See details&lt;/string&gt;\n&lt;!-- RFID Status --&gt;\n&lt;string name=\"rfid_read_chip_verified_sdk_enrolment\"&gt;Chip verified&lt;/string&gt;\n&lt;string name=\"rfid_read_chip_not_verified_sdk_enrolment\"&gt;Chip not verified&lt;/string&gt;\n&lt;string name=\"rfid_read_chip_not_available_sdk_enrolment\"&gt;It seems that this document does not have a chip. Please, check your information below:&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class <pre><code>//Document Preview Titles - It is not an e-Document (does not have the message label)\nTheme.shared.strings.documentReader.titleNFCNotSupported\n\n//Document Preview Titles - User skipped chip reading\nTheme.shared.strings.documentReader.titleChipSkipped\nTheme.shared.strings.documentReader.subtitleChipSkipped\n\n//Document Preview Titles - Successful chip reading (does not have the message label)\nTheme.shared.strings.documentReader.titleChipSuccess\n\n//Document Preview Titles - Chip reading error\nTheme.shared.strings.documentReader.titleChipError\nTheme.shared.strings.documentReader.subtitleChipError\n\n// Document Data\nTheme.shared.strings.documentData.surname\nTheme.shared.strings.documentData.givenNames\nTheme.shared.strings.documentData.docClassCode\nTheme.shared.strings.documentData.documentId\nTheme.shared.strings.documentData.birthDate\nTheme.shared.strings.documentData.expiryDate\nTheme.shared.strings.documentData.personalNumber\nTheme.shared.strings.documentData.gender\nTheme.shared.strings.documentData.issuingStateCode\nTheme.shared.strings.documentData.issuingStateName\nTheme.shared.strings.documentData.nationalityCode\nTheme.shared.strings.documentData.nationality\nTheme.shared.strings.documentData.optionalData\nTheme.shared.strings.documentData.mrz\n\n//RFID Status\nTheme.shared.strings.documentDatachipVerified\nTheme.shared.strings.documentDatachipNotVerified \nTheme.shared.strings.documentDatachipNotAvailable\n\n//Buttons\nTheme.shared.strings.buttons.showDetails\nTheme.shared.strings.buttons.retry\nTheme.shared.strings.buttons.continue\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_PreviewView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;!-- Titles text color--&gt;\n&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n&lt;!-- Form colors--&gt;\n&lt;color name=\"colorDocumentDataFormHeaderTxtSdkEnrolment\"&gt;#5A7FEB&lt;/color&gt;\n&lt;color name=\"colorDocumentDataFormHeaderSeparatorSdkEnrolment\"&gt;#5A7FEB&lt;/color&gt;\n&lt;color name=\"colorDocumentDataFormFieldHeaderTxtSdkEnrolment\"&gt;#8B8D95&lt;/color&gt;\n&lt;color name=\"colorDocumentDataFormFieldTxtSdkEnrolment\"&gt;#5E646C&lt;/color&gt;\n&lt;color name=\"colorDocumentDataFormFieldErrorTxtSdkEnrolment\"&gt;#D40000&lt;/color&gt;\n&lt;color name=\"colorDocumentDataFormSeparatorSdkEnrolment\"&gt;#979797&lt;/color&gt;\n</code></pre></p> <p>You can change the background color of the view or the details card by overriding the following color resources: <pre><code>&lt;!-- Screen Background color--&gt;\n&lt;color name=\"colorDocumentDataBgSdkEnrolment\"&gt;#FDFCFF&lt;/color&gt;\n&lt;!-- Form Background color--&gt;\n&lt;color name=\"colorDocumentPreviewBg\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the buttons text and background color by overriding the following color resources: <pre><code>&lt;!-- Continue Button--&gt;\n&lt;color name=\"colorButtonBlueBackgroundTintSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n&lt;color name=\"colorButtonBlueTextSdkEnrolment\"&gt;@android:color/white&lt;/color&gt;\n&lt;!-- Retry Button--&gt;\n&lt;color name=\"colorButtonTransparentTextSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n&lt;color name=\"colorButtonTransparentBackgroundTintSdkEnrolment\"&gt;@android:color/transparent&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class  <pre><code>Theme.shared.colors.documentData.title // title(1) and message(2)\nTheme.shared.colors.datafield.title //to all \nTheme.shared.colors.datafield.value\n</code></pre> You can change the background color by overriding the following color in Theme class: <pre><code>Theme.shared.colors.documentData.background\nTheme.shared.colors.common.backgroundCards // card color (It affects other screens)\n</code></pre></p> <p>You can change the color of the retry button(4) (this affects all secondary style buttons) <pre><code>Theme.shared.colors.button.secondaryBackground\nTheme.shared.colors.button.secondaryTitle\n</code></pre></p> <p>You can change the color of the continue button(5) (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_PreviewView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Button.Blue\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Button.White\"&gt;\n\n&lt;!-- Form styles--&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Form.Field.Header\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Regular\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Form.Field\" parent=\"Theme.Sdk.Enrolment\"&gt;\n\n&lt;!-- Card style--&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Card\" parent=\"Theme.Sdk.Enrolment\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\nTheme.shared.fonts.medium\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html","title":"RFID Instructions View","text":"<p>The third view of the document reader flow is the RFID Read View, this screen only appears if it is an e-Document and the variable readRFID from ReadDocumentParameters is active. This screen allows the user to prepare for the chip reading or skip this feature.</p> <p></p> <p>It contains a title(1), a message(2), an image(3), a read button(4), a skip button(5) and a background that can be customized. </p>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"rfid_instructions_read_title_sdk_enrolment\"&gt;Scanning complete;\\nlet\\'s scan your document chip.&lt;/string&gt;\n&lt;string name=\"rfid_instructions_read_subtitle_sdk_enrolment\"&gt;Your phone is able to detect and read the chip in your document. By doing this, all information can be verified right away.&lt;/string&gt;\n&lt;string name=\"rfid_instructions_read_sdk_enrolment\"&gt;Read chip&lt;/string&gt;\n&lt;string name=\"rfid_instructions_skip_read_sdk_enrolment\"&gt;Skip chip read&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class</p> <pre><code>Theme.shared.strings.rfid.rfidReadTitle\nTheme.shared.strings.rfid.rfidReadSubtitle\nTheme.shared.strings.buttons.readChip\nTheme.shared.strings.buttons.skipChipRead\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorDocumentReadRFIDBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class: <pre><code>Theme.shared.colors.rfidData.title\nTheme.shared.colors.rfidData.subtitle\n</code></pre></p> <p>You can change the background color by overriding the following color in Theme class: <pre><code>Theme.shared.colors.rfidData.background\n</code></pre></p> <p>You can change the color of the read button (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p> <p>You can change the color of the skip button (this affects all secondary style buttons) <pre><code>Theme.shared.colors.button.secondaryBackground\nTheme.shared.colors.button.secondaryTitle\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html#image","title":"Image","text":"AndroidiOS <p>You can change the image by adding a drawable with this name: <pre><code>ic_read_chip_instructions.xml\n</code></pre> The image we are using is 208x208dp.</p> <p>You can change the image by adding a asset file and overriding the following image name in Theme class <pre><code>Theme.shared.images.documentReader.rfiDescription\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_RFIDReadView.html#use-your-own-layouts","title":"Use your own layouts","text":"AndroidiOS <p>To use your own custom screens for document reader feature, you need to implement the MobileID SDK Interface for that view.</p> <p>In this case: ICustomDocumentReader.RfidInstructionsView <pre><code>interface RfidInstructionsView{\n    fun getReadChipButton(): View?\n    fun getSkipButton(): View?\n    fun hideInstructions()\n}\n</code></pre></p> <ul> <li>getReadChipButton method must return a Button to start the rfid reading, when clicked it will also start the timeout.</li> <li>getSkipButton can return either null or a button/image to skip the rfid reading.</li> <li>hideInstructions is called when the view is dismissed.</li> </ul> <p>For example create a class RfidTutorialCustomView, create a layout file and bind it.</p> <pre><code>class RfidTutorialCustomView(\ncontext: Context\n) : ConstraintLayout(context), ICustomDocumentReader.RfidInstructionsView {\nprivate var binding: ViewRfidTutorialBinding // Requires view binding enabled\n// private var view: View\n\n    init {\n        binding = ViewRfidTutorialBinding.inflate(LayoutInflater.from(context), this)\n        // You can also use other inflate method like this:\n        // view = inflate(context, R.layout.view_rfid_tutorial, this)\n    }\n    override fun getReadChipButton() = binding.btnReadChip\n    // override fun getReadChipButton(): View = view.findViewById(R.id.btn_read_chip)\n\n    override fun getSkipButton() = binding.btnSkip\n\n    override fun hideInstructions() {\n        // Do nothing\n    }\n}\n</code></pre> <p>You need to register a class of type DocumentReaderRFIDInstructionsViewType through the following function of EnrolmentViewRegister <pre><code>public func registerDocumentReaderRFIDInstructionsView(_ viewType: DocumentReaderRFIDInstructionsViewType)\n</code></pre></p> <p>The DocumentReaderRFIDInstructionsViewType class needs to respect the following protocols:</p> <pre><code>public protocol DocumentReaderRFIDInstructionsViewInterface {\n    var delegate: DocumentReaderRFIDInstructionsViewDelegate? { get set }\n    func hideInstructions()\n}\n\npublic protocol DocumentReaderRFIDInstructionsViewDelegate: AnyObject {\n    func didPressReadChipButton()\n    func didPressSkipButton()\n}\n\npublic typealias DocumentReaderRFIDInstructionsViewType = DocumentReaderRFIDInstructionsView.Type\npublic typealias DocumentReaderRFIDInstructionsView = UIView &amp; DocumentReaderRFIDInstructionsViewInterface\n</code></pre> <p>Example: <pre><code>class RFIDReadView: DocumentReaderRFIDInstructionsView {\n\n    weak var delegate: DocumentReaderRFIDInstructionsViewDelegate?\n\n// MARK: - Initialization\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        //add any UI customization you need\n    }\n\n// MARK: - Actions\n\n    @objc private func readChipButtonTapped(button: UIButton) {\n        delegate?.didPressReadChipButton()\n    }\n\n    @objc private func skipButtonTapped(button: UIButton) {\n        delegate?. didPressSkipButton()\n    }\n\n// MARK: - Functions\n\n    func hideInstructions() {\n        //You can stop animations or other activities that consumes resources \n    }\n}\n</code></pre></p>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html","title":"Read Chip View","text":"<p>It contains a title(1), a message(2), an animation(3), a loading spinner(4), a loading message(5) and a background that can be customized. </p>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html#text-resources","title":"Text resources","text":"<p>You can add your own texts and localization by overriding the following string resources:</p> <pre><code>&lt;resources&gt;\n    &lt;string name=\"nfc_tag_detected_title_loading_sdk_enrolment\"&gt;Keep your phone still&lt;/string&gt;\n    &lt;string name=\"nfc_tag_detected_subtitle_loading_sdk_enrolment\"&gt;Your phone identified the chip and it\u2019s reading it.\\nPlease, don\u2019t move your phone.&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html#colors","title":"Colors","text":"<p>You can change the colors of text elements, the background and/or the spinner in the bottom area  that shows the progress of the RFID reading by overriding the following color resource (It affects all texts):</p> <pre><code>&lt;resources&gt;\n    &lt;!-- Change the text color --&gt;\n    &lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n    &lt;!-- Change the background color --&gt;\n    &lt;color name=\"colorOverlayFeedbackBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n    &lt;!-- Change the spinner colors --&gt;\n    &lt;color name=\"colorProgressBarSecondaryProgressSdkEnrolment\"&gt;#CFD8DC&lt;/color&gt;\n    &lt;color name=\"colorProgressBarPrimaryProgressSdkEnrolment\"&gt;#0000FF&lt;/color&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html#styles","title":"Styles","text":"<p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;resources&gt;\n    &lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;&lt;/style&gt;\n    &lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;&lt;/style&gt;\n&lt;/resources&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html#animation","title":"Animation","text":"<p>You can change the animation by adding a raw json animation file with this name:</p> <ul> <li>chip_read_finding_sdk_enrolment.json for the large animation</li> </ul> <p>You can change the spinner  animation by adding a drawable file with this name:</p> <ul> <li>pb_progress_bar_style.xml</li> </ul>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_Android.html#use-your-own-layouts","title":"Use your own layouts","text":"<p>To use your own custom screens for document reader feature, you need to implement the MobileID SDK Interface for that view. In this case: ICustomDocumentReader.RfidProcessView <pre><code>interface RfidProcessView {\n    fun updateRFIdStatus(text: String, progress: Int)\n    fun hideProcess()\n}\n</code></pre></p> <p>updateRfidStatus is called when the progress of the chip reading changes. </p> <p>Since this stage takes multiple different readings: - The text variable contains information sent by Regula to identify what's being read at the moment.  - The progress variable is a 0-100 variable that display the percentage read of that component.</p> <p>For example create a class RfidProcessCustomView, create a layout file and bind it.</p> <pre><code>class RfidProcessCustomView(\n    context: Context\n) : ConstraintLayout(context), ICustomDocumentReader.RfidProcessView {\n    private var binding: ViewRfidProcessBinding\n\n    init {\n        binding = ViewRfidProcessBinding.inflate(LayoutInflater.from(context), this)\n    }\n\n    override fun updateRFIdStatus(text: String, progress: Int) {\n        binding.tvRfidProcessMessage.text = \"$text| $progress%\"\n    }\n\n    override fun hideProcess() {\n        // Do nothing\n    }\n}\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_ReadChipView_iOS.html","title":"Read Chip View","text":"<p>This screen is exclusive to iOS. It is Apple's native implementation of RFID chip reading and cannot be customized in any way.</p> <p></p>"},{"location":"Features/DocumentReader/DocumentReader_RegulaDB.html","title":"Database download methods","text":"<p>The document reader requires a document database of templates.</p>"},{"location":"Features/DocumentReader/DocumentReader_RegulaDB.html#runtime-download","title":"Runtime download","text":"<p>Usually this file is downloaded in runtime and since it's a large file can take sometime to finish, depending on the user internet. This download will happen in the first run and everytime the database is outdated. </p> <p>There are two ways to download this file: - By default, the download will happen in the beginning of the document reader - You can trigger this download at anytime in your app by calling the enrolment facade method:</p> AndroidiOS <pre><code>enrolment.startDatabaseUpdate(object: RegulaDatabaseListener {\n  override fun onDownloadProgressChanged(progress: Int) {\n    Log.i(\"RegulaDBUpdate\", \"progress = {$progress}\")\n  }\n\n  override fun onReady() {\n    Log.i(\"RegulaDBUpdate\", \"Regula Database updated\")\n  }\n\n  override fun unableToPrepareDatabase(error: String?) {\n    Log.i(\"RegulaDBUpdate\", \"error = $error\")\n  }\n})\n</code></pre> <pre><code>func startUpdateDatabase(progressHandler: ((Progress) -&gt; Void)?, completion: @escaping (Result&lt;Void, DocumentReaderError&gt;) -&gt; Void)\n</code></pre> <p>With this method you can start the download at anytime decreasing the loading time of the document reader.</p> AndroidiOS <p>If you need to stop listening for the download progress, you can remove the callback at anytime by calling the method:</p> <pre><code>override fun removeDatabaseUpdateListener() {\n    enrolment.removeDatabaseUpdateListener(yourListener)\n}\n</code></pre> <p>At this time it is not possible to remove handlers during the process. They will be automatically removed when the download is completed successfully or in error.</p>"},{"location":"Features/DocumentReader/DocumentReader_RegulaDB.html#bundled-option","title":"Bundled option","text":"<p>It's also possible to pre-bundle the database into your own application in order to speed document reader init time. Keep in mind that the final apk size will increase significantly using this method.</p> <p>In order to bundle the database into your application you will need to:</p> <ol> <li>Download the appropriate database:<ul> <li>change &lt;your_db&gt; for the appropriate value (example: Full, Passports)</li> <li>check the compatible version (currently 6.1)</li> <li>use the 'url' link to download the database</li> </ul> </li> <li>Depending on your platform, complete the remaining step:</li> </ol> AndroidiOS <p>Add the downloaded database file to the app/src/main/assets/Regula folder of the project.</p> <p>Add the downloaded database file to the desired project's target.</p> <p>Everytime there's a new version available, Mobile ID SDK will still download the newest version and replace it,  so this method requires to manually update the source often in order to be effective.</p>"},{"location":"Features/DocumentReader/DocumentReader_ScanView.html","title":"Scan View","text":"<p>The second view of the document reader flow is the scan view, it's the camera screen that detects the document and reads it's data through OCR method. This screen belongs to Regula and it does not allow us to change, only some small customization is possible.</p> <p></p> <p>It contains a title(1), a message(2), a frame(3) and a cancel button (4) that can be customized.</p>"},{"location":"Features/DocumentReader/DocumentReader_ScanView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/DocumentReader/DocumentReader_ScanView.html#text-resources","title":"Text resources","text":"<p>This text is dynamic and has been translated into several languages (and cannot be changed)</p> <p>info \"Supported languages:\"</p> <pre><code>- Arabic (ar)\n- Bangla (bn)\n- Czech (cs)\n- Danish (da)\n- German (de)\n- Greek (el)\n- English (en)\n- Spanish (es)\n- Finnish (fi)\n- French (fr)\n- Hebrew (he)\n- Hindi (hi)\n- Croatian (hr)\n- Hungarian (hu)\n- Indonesian (id)\n- Italian (it)\n- Japanese (ja)\n- Korean (ko)\n- Malay (ms)\n- Norwegian (nb)\n- Dutch (nl)\n- Polish (pl)\n- Portuguese (pt)\n- Romanian (ro)\n- Russian (ru)\n- Slovak (sk)\n- Swedish (sv)\n- Thai (th)\n- Turkish (tr)\n- Ukrainian (uk)\n- Vietnamese (vi)\n- Chinese Simplified (zh-Hans)\n- Chinese Traditional (zh-Hant)\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_ScanView.html#colors","title":"Colors","text":"AndroidiOS <p>This is not customizable in Android yet</p> <p>You can change the frame color by overriding the following color in Theme class (It other screens in the app):</p> <pre><code>// Default state\nTheme.shared.colors.common.black\n// Valid state\nTheme.shared.colors.faceCapture.stateValid\n</code></pre>"},{"location":"Features/DocumentReader/DocumentReader_ScanView.html#styles","title":"Styles","text":"AndroidiOS <p>This is not customizable in Android yet</p> <p>You can change the font through the theme class (this will affect all text in the app):</p> <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_ErrorView.html","title":"Error View","text":"<p>When the showErrors flag is set to true in the BiometricFaceCaptureParameters class, then any error that happens in this feature will show a default screen with some information. When the resulting image fails any of the quality tests, then this screen will also appear showing a list of the tests that failed. You can either customize this screen to your branding or set the flag to false and handle the error in your own activity.</p> <p></p> <p>It contains a title(1), a message(2), an image(3), a warning icon(4), a list item layout(5), a retry button(6) and a background that can be customized. </p>"},{"location":"Features/FaceCapture/FaceCapture_ErrorView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/FaceCapture/FaceCapture_ErrorView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;!-- Failed Tests Description --&gt;\n&lt;string name=\"face_capture_failed_tests_title_sdk_enrolment\"&gt;We need another selfie&lt;/string&gt;\n&lt;string name=\"face_capture_failed_tests_subtitle_sdk_enrolment\"&gt;See below what needs to be improved&lt;/string&gt;\n&lt;string name=\"not_eyes_closed_test_desc_sdk_enrolment\"&gt;Make sure to keep a neutral expression: eyes open, mouth closed.&lt;/string&gt;\n&lt;string name=\"angle_test_desc_sdk_enrolment\"&gt;Keep your head straight and facing the camera directly.&lt;/string&gt;\n&lt;string name=\"relative_eyeline_frame_test_desc_sdk_enrolment\"&gt;Make sure your face is centered and fully visible within the frame&lt;/string&gt;\n&lt;string name=\"face_too_far_test_desc_sdk_enrolment\"&gt;It seems that you were too far away. Try holding your phone a bit closer.&lt;/string&gt;\n&lt;string name=\"face_too_close_test_desc_sdk_enrolment\"&gt;It seems that you were too close to the camera. Try holding your phone farther away.&lt;/string&gt;\n&lt;string name=\"multiple_face_test_desc_sdk_enrolment\"&gt;Only the document owner should be in the frame.&lt;/string&gt;\n&lt;string name=\"image_blurred_test_desc_sdk_enrolment\"&gt;The picture was not clear enough.&lt;/string&gt;\n&lt;string name=\"face_capture_liveness_check_test_sdk_enrolment\"&gt;This seems to be a picture of a picture. It must really be a real-time selfie.&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class for the title and subtitle <pre><code>Theme.shared.strings.faceCapture.titleQualityTests.localized()\nTheme.shared.strings.faceCapture.subtitleQualityTests.localized()\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class for the button <pre><code>Theme.shared.strings.buttons.retake.localized()\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_ErrorView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorOverlayInvalidTxtSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayInvalidBgSdkEnrolment\"&gt;#F1F0F4&lt;/color&gt;\n</code></pre></p> <p>You can change the color of the labels <pre><code>Theme.shared.colors.faceCapture.titleDark\n</code></pre></p> <p>You can change the color of the button (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_ErrorView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app):</p> <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_ErrorView.html#image","title":"Image","text":"AndroidiOS <p>You can change the loading image by adding a drawable with this name: <pre><code>ic_face_capture_failed_sdk_enrolment.xml\n</code></pre> The image we are using is 120x120dp.</p> <p>You can change the image by adding a asset file and overriding the following image name in Theme class <pre><code>Theme.shared.images.faceCapture.errorRedCircle\nTheme.shared.images.faceCapture.improveSelfie\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_Index.html","title":"Face Capture","text":"<p>The Mobile ID SDK provides a functionality that simplifies the process of obtaining a frame for biometry checks. To achieve it, we use face detection technology, and capture a frame with the user\u2019s face. The live photo is then processed and checked against a liveness algorithm that will try to detect specific characteristics of spoofing attempts, returning a score that indicates if the person using the app is there or trying to impersonate someone else.</p>"},{"location":"Features/FaceCapture/FaceCapture_Index.html#initiate-face-capture","title":"Initiate Face Capture","text":"<p>The Mobile ID SDK provides a complete set of functionalities that allows capturing and processing the user\u2019s facial characteristics, and match them against the travel document\u2019s photo. This helps ensuring that the user who is enrolling is the document\u2019s owner. The biometric face capture should be the final step before creating a Digital ID in a remote system. If you only need to capture a frame with the user\u2019s face for biometric quality validation and check against liveness algorithms, you can use the method biometricFaceCapture.</p> AndroidiOS <pre><code>/**\n * Uses the device camera to capture a photo of the user face (selfie).\n *\n * Some tests will be run against this photo to ensure the photo quality and a liveness check verification.\n *\n * @param context Context\n * @param params [BiometricFaceCaptureParameters] configurations parameters.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results.\n */\nfun biometricFaceCapture(\n    context: Context,\n    params: BiometricFaceCaptureParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>/// Uses the device camera to capture a photo of the user face (selfie). Some tests will be run against this photo to ensure the photo quality and a liveness check verification.\n/// - Parameters:\n///   - parameters: Configures the check liveness step.\n///   - viewController: View controller that will present the face capture views.\n///   - completionHandler: The completion handler to call when the face capture feature is finished.\n///     This completion handler takes the following parameter:\n///\n///     Result&lt;BiometricFaceCaptureReport, BiometricFaceCaptureError&gt;\n///     Where `BiometricFaceCaptureReport` contains  the results of the face capture\n///     operation and `FaceCaptureReportError` the possible errors that may occur during the process.\n    func biometricFaceCapture(parameters: BiometricFaceCaptureParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;BiometricFaceCaptureReport, FaceCaptureReportError&gt;) -&gt; Void)\n</code></pre> <p>The SDK provides UI solutions for the capture process and photo preview, as shown in the images below. The use of the photo preview depends on the BiometricFaceCaptureParameters passed to the biometricFaceCapture method. Below is an example of that object:</p> AndroidiOS <pre><code>@Parcelize\ndata class BiometricFaceCaptureParameters(\n    val showPreview: Boolean,\n    val showErrors: Boolean,\n    val frameFormat: FaceCaptureFrameFormat = FaceCaptureFrameFormat.OVAL,\n    val cameraConfig: CameraConfig,\n    val faceCaptureTimeout: Long? = null\n) : Parcelable{\n    init {\n        if (faceCaptureTimeout != null) {\n            require(faceCaptureTimeout &gt;= TimeUnit.SECONDS.toMillis(30)) { \"faceCaptureTimeout value must be at least 30 seconds.\" }\n        }\n    }\n}\n</code></pre> <p>The FaceCaptureFrameFormat is an enum that shapes the frame where the face must be centered to take the selfie. Currently it has two options:</p> <pre><code>enum class FaceCaptureFrameFormat {\n    SQUARE,\n    OVAL\n}\n</code></pre> <p>The CameraConfig is another data class that lets your configure the visibility of the toggle button and change the camera direction (Front or Back).</p> <p>data class CameraConfig(     val enableCameraToggle: Boolean,     val defaultCamera: CameraSelector, )</p> <pre><code>public struct BiometricFaceCaptureParameters {\n    public let showPreview: Bool\n    public let frameShape: BiometricFaceCaptureFrameOptions\n    public let showErrors: Bool\n    public let cameraConfig: CameraConfig\n    public let faceCaptureTimeout: TimeInterval?\n\n    public init(showPreview: Bool,\n            frameShape:BiometricFaceCaptureFrameOptions = .oval,\n            showErrors: Bool,\n            cameraConfig: CameraConfig = CameraConfig(),\n            faceCaptureTimeout: TimeInterval? = nil)\n</code></pre> <p>The BiometricFaceCaptureFrameOptions is an enum that shapes the frame where the face must be centered to take the selfie. Currently it has two options:</p> <pre><code>public enum BiometricFaceCaptureFrameOptions {\n    case oval\n    case square\n}\n</code></pre> <p>The CameraConfig is an enum that struct the frame where the face must be centered to take the selfie. Currently it has two options:</p> <pre><code>public struct CameraConfig {\n    public let toggleCameraEnable: Bool\n    public let defaultCamera: AVCaptureDevice.Position\n\n    public init(toggleCameraEnable: Bool = true,\n            defaultCamera:AVCaptureDevice.Position = .front) {\n        self.toggleCameraEnable = toggleCameraEnable\n        self.defaultCamera = defaultCamera\n    }\n}\n</code></pre> <p>The showPreview parameter is a boolean that when set to true will show the user\u2019s picture after taking it. You can also apply your app\u2019s colors and fonts to these layout solutions, to keep your brand\u2019s image consistent. See Custom styles.</p> <p>This function is used to acquire a high-resolution selfie with a 9:7 aspect ratio. The photo will only be taken if the frame conforms to specific parameters that make sure the face is centered and not too far away, or too close.</p>"},{"location":"Features/FaceCapture/FaceCapture_Index.html#handle-result","title":"Handle Result","text":"AndroidiOS <p>Here's how you can get the result by using the result launcher that's passed as the final parameter: <pre><code>private val faceCaptureResultLauncher = registerForActivityResult(FaceCaptureResultLauncher())\n{ result: FaceCaptureActivityResult -&gt;\n    when {\n        result.success -&gt; onSuccess(result.faceCaptureReportSuccess)\n        result.faceCaptureReportError?.userCanceled == true -&gt; onUserCanceled()\n        result.faceCaptureReportError?.termsAndConditionsAccepted == false -&gt; onUserTermsAndConditionsRejected()\n        result.faceCaptureReportError?.failedTests != null &amp;&amp; result.faceCaptureReportError?.performedTests != null -&gt;\n            onFailedTests(\n                result.faceCaptureReportError!!.performedTests!!,\n                result.faceCaptureReportError!!.failedTests!!\n            )\n        else -&gt; onBiometricFaceCaptureError()\n    }\n}\n</code></pre></p> <pre><code>enrolment?.biometricFaceCapture(parameters: params, viewController: view) { result in\n    switch result {\n    case .success(let report):\n        print(\"Face capture successful.\")\n        EnrolmentData.faceCapture = report.photo\n        EnrolmentData.biometricFaceCaptureReport = report\n        completion(.success(()))\n\n    case .failure(let biometricFaceCaptureError):\n        EnrolmentData.biometricFaceCaptureReport = nil\n\n        if biometricFaceCaptureError.userCanceled {\n            print(\"Face capture cancelled by user.\")\n            completion(.failure(biometricFaceCaptureError))\n        } else {\n            print(biometricFaceCaptureError.featureError.publicMessage)\n            completion(.failure(biometricFaceCaptureError))\n        }\n    }\n}\n</code></pre> <p>You will receive a model of the type FaceCaptureActivityResult that will contain the success data (in this case a FaceCaptureReportSuccess) or the error data.</p> AndroidiOS <pre><code>data class FaceCaptureActivityResult(\n    val faceCaptureReportSuccess: FaceCaptureReportSuccess?,\n    val faceCaptureReportError: FaceCaptureReportError?\n) {\n    val success get() = faceCaptureReportSuccess != null\n}\n</code></pre> <pre><code>public struct BiometricFaceCaptureReport: Codable {\n\n    /// Contains the list of biometric process tests performed in Orchestra during the biometric face capture process.\n    public var performedTests: [CheckLivenessTest]\n\n    /// Contains the list of biometric process tests failed in Orchestra during the biometric face capture process.\n    public var failedTests: [CheckLivenessTest]\n\n    /// Flag indicating if liveness check was performed or not during the biometric face capture process.\n    public var performedLivenessCheck: Bool\n\n    /// Biometric photo hash\n    public var biometricHash: String?\n\n    /// Biometric photo\n    public var photo: UIImage? \n\n    public init(photo: UIImage, performedTests: [CheckLivenessTest], failedTests: [String], performedLivenessCheck: Bool, biometricHash: String?)\n}\n</code></pre> <p>The FaceCaptureReportError has the following structure:</p> AndroidiOS <pre><code>data class FaceCaptureReportError(\n    val userCanceled: Boolean,\n    val termsAndConditionsAccepted: Boolean,\n    val featureError: FeatureError?,\n    val failedTests: List&lt;String&gt;?,\n    val performedTests: List&lt;String&gt;?\n)\n</code></pre> <pre><code>public class FaceCaptureReportError: Error {\n    public var userCanceled: Bool\n    public var termsAndConditionsAccepted: Bool\n    public var featureError: FeatureError\n    public var failedTests: [String]?\n    public var performedTests: [String]?\n}\n</code></pre> <p>The <code>FaceCaptureReportSuccess</code> includes a <code>biometricHash</code> attribute that needs to be included in the Match operation to verify data integrity. It also used when building a Subject.</p> <p>The failed tests might include one or more of the following tests:</p> Name Description FaceTooFarTest Error indicating that the face was very far. FaceTooCloseTest Error indicating that the face was very close. FaceNotCenteredTest Error indicating that the face was not centered. MultipleFacesDetectedTest Error indicating that multiple faces were detected in the image. FaceRotatedTest Error indicating that the face was rotated in Z angle. A face with a positive Euler Z angle is rotated counter-clockwise relative to the camera. NoFaceDetectedTest Error indicating that no face was detected in the picture. EyesClosedTest Error indicating that the eyes are closed. SmilingTest Error indicating that the user was smiling. FaceSidewaysTest Error indicating that the face was rotated in Y angle. A face with a positive Euler Y angle is looking to the right of the camera, or looking to the left if negative. FaceVerticalTest Error indicating that the face was rotated in X angle. A face with a positive Euler X angle is facing upward. MouthOpenTest Error indicating that the user has the mouth open. ImageBlurredTest Error indicating that the image is blurred. FaceCropFailedTest Error indicating that the face crop failed. LivenessCheckQualityTest Error indicating that the liveness quality test failed. LivenessCheckProbabilityTest Error indicating that the liveness probability test failed."},{"location":"Features/FaceCapture/FaceCapture_Index.html#biometricfacecapturecustomviews","title":"BiometricFaceCaptureCustomViews","text":"<p>The SDK provides default UI solutions for the document reader feature flow, as shown in the following images:</p> <p></p> <p>The use of the preview layout depends on the showPreview flag in the BiometricFaceCaptureParameters.</p> <p>The use of the Errors layout depends on the showErrors flag in the BiometricFaceCaptureParameters.</p> AndroidiOS <pre><code>@Parcelize\nclass BiometricFaceCaptureCustomViews(\n    val loadingView: Class&lt;out ICustomBiometricFaceCapture.LoadingView&gt;? = null\n) : Parcelable\n</code></pre> <pre><code>public class EnrolmentViewRegister {\n    ...\n\n    public func registerBiometricFaceCaptureLoadingView(_ viewType: FaceCaptureLoadingViewType)\n    ...\n}\n</code></pre> <p>You can use your own custom views in the biometric face capture functionality. Your view must implement the SDK view interfaces. For example, if you want to add a custom loadingView, your view class must implement the ICustomBiometricFaceCapture.LoadingView interface.</p> <p>In the customization tab you will also find examples to create your own custom views.</p>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html","title":"Loading View","text":"<p>The only view of the biometric face capture flow is the loading view, it appears when the feature is initializing, when the selfie is being processed and when the liveness service is called.</p> <p></p> <p>It contains a title(1), a message(2), an image(3) and a background that can be customized. </p>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"biometric_face_capture_initializing_overlay_title_sdk_enrolment\"&gt;A selfie, please&lt;/string&gt;\n&lt;string name=\"biometric_face_capture_initializing_overlay_subtitle_sdk_enrolment\"&gt;Your selfie will be used to recognize you&lt;/string&gt;\n&lt;string name=\"face_capture_processing_title_sdk_enrolment\"&gt;Just a moment\u2026&lt;/string&gt;\n&lt;string name=\"face_capture_processing_subtitle_sdk_enrolment\"&gt;Processing Photo&lt;/string&gt;\n&lt;string name=\"biometric_face_capture_process_photo_overlay_title_sdk_enrolment\"&gt;We\u2019re checking your picture&lt;/string&gt;\n&lt;string name=\"common_loading_message_sdk_enrolment\"&gt;This will only take a moment&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class</p> <pre><code>Theme.shared.strings.faceCapture.initialization.localized()\nTheme.shared.strings.faceCapture.processingTitle.localized()\nTheme.shared.strings.checkPermission.loadingMessage.localized()\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayFeedbackBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class (It affects all Loading Screens):</p> <pre><code>Theme.shared.colors.checkPermission.title\nTheme.shared.colors.checkPermission.subtitle\n</code></pre> <p>You can change the background color by overriding the following color in Theme class(It affects all Loading Screens):</p> <pre><code>Theme.shared.colors.checkPermission.background\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app):</p> <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html#image","title":"Image","text":"AndroidiOS <p>You can change the loading animation by adding a raw json animation file with this name: <pre><code>loading_facecapture.json\n</code></pre></p> <p>You can change the loading image by overriding the following image name in Theme class <pre><code>Theme.shared.images.faceCapture.faceCaptureLoading\nTheme.shared.animations.common.loading\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_LoadingView.html#use-your-own-layouts","title":"Use your own layouts","text":"AndroidiOS <p>To use your own loading screen for face capture feature, you need to implement the MobileID SDK Interface for that view.</p> <p>In this case: ICustomBiometricFaceCapture.LoadingView <pre><code>interface LoadingView {\n    fun onPreFeatureLoading()\n    fun onFaceProcessLoading()\n    fun onLivenessLoading()\n    fun onPostFeatureLoading()\n    fun hideLoading()\n}\n</code></pre> You can these functions to change loading screen texts in runtime, or you can opt to ignore those functions.</p> <p>For example create a class BiometricFaceCaptureLoadingCustomView, create a layout file and bind it.</p> <pre><code>class CustomFaceCaptureLoadingView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) : ConstraintLayout(context, attrs, defStyleAttr), ICustomBiometricFaceCapture.LoadingView {\n\n    init {\n        inflate(context, R.layout.view_biometric_face_capture_init, this)\n    }\n\n    override fun onPreFeatureLoading() {\n    }\n\n    override fun onFaceProcessLoading() {\n    }\n\n    override fun onLivenessLoading() {\n    }\n\n    override fun onPostFeatureLoading() {\n    }\n\n    override fun hideLoading() {\n    }\n}\n</code></pre> <p>You need to register a class of type FaceCaptureLoadingViewType through the following function of EnrolmentViewRegister <pre><code>public func registerBiometricFaceCaptureLoadingView(_ viewType: FaceCaptureLoadingViewType)\n</code></pre></p> <p>The FaceCaptureLoadingViewType class needs to respect the following protocols:</p> <pre><code>public protocol FeatureLoadingViewInterface {\n    func onPreFeatureLoading()\n    func onPostFeatureLoading()\n    func hideLoading()\n}\n\npublic typealias FeatureLoadingViewType = FeatureLoadingView.Type\npublic typealias FeatureLoadingView = UIView &amp; FeatureLoadingViewInterface\n\npublic protocol FaceCaptureLoadingViewInterface: FeatureLoadingView {\n    // called while processing is running.\n    func onFaceProcessLoading()\n\n    // called when liveness is being checked.\n    func onLivenessLoading()\n}\n\npublic typealias FaceCaptureLoadingViewType = FaceCaptureLoadingView.Type\npublic typealias FaceCaptureLoadingView = UIView &amp; FaceCaptureLoadingViewInterface\n</code></pre> <p>Example: <pre><code>class LoadingView: FaceCaptureLoadingView {\n\n    // MARK: - Initialization\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        //add any UI customization you need\n    }\n\n    // MARK: - Functions\n\n    func onPreFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func onPostFeatureLoading() {\n        //add any UI customization you need\n    }   \n\n    func onFaceProcessLoading(){\n        //add any UI customization you need\n    }\n\n    func onLivenessLoading(){\n        //add any UI customization you need\n    }\n\n    func hideLoading() {\n        //You can stop animations or other activities that consumes resources \n    }\n}\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_PreviewView.html","title":"Preview View","text":"<p>When the showPreview flag is set to true in the BiometricFaceCaptureParameters class, then at the end of the flow, a preview screen will be shown so that the user can check its selfie. You can either customize this screen to your branding or set the flag to false and handle the preview in your own activity.</p> <p></p> <p>It contains a title(1), a message(2), a frame (3), a retry button (4), a continue button(5) and a background that can be customized. </p>"},{"location":"Features/FaceCapture/FaceCapture_PreviewView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/FaceCapture/FaceCapture_PreviewView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"biometric_face_capture_preview_title_sdk_enrolment\"&gt;Here\u2019s your selfie!&lt;/string&gt;\n&lt;string name=\"biometric_face_capture_preview_subtitle_sdk_enrolment\"&gt;It will be used only to identify you later on. It won\\'t be accessed by anyone.&lt;/string&gt;\n&lt;string name=\"bt_retake_sdk_enrolment\"&gt;New selfie&lt;/string&gt;\n&lt;string name=\"bt_continue_sdk_enrolment\"&gt;Go ahead&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class</p> <pre><code>Theme.shared.strings.faceCapture.titlePreview.localized()\nTheme.shared.strings.faceCapture.subtitlePreview.localized()\n\nTheme.shared.strings.buttons.retake.localized()\nTheme.shared.strings.buttons.continue.localized()\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_PreviewView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorPreviewBgSdkEnrolment\"&gt;#FDFCFF&lt;/color&gt;\n</code></pre></p> <pre><code>&lt;!-- Continue button --&gt;\n&lt;color name=\"colorButtonBlueTextSdkEnrolment\"&gt;@android:color/white&lt;/color&gt;\n&lt;color name=\"colorButtonBlueBackgroundTintSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n\n&lt;!-- Retake button --&gt;\n&lt;color name=\"colorButtonTransparentTextSdkEnrolment\"&gt;#1F5FA6&lt;/color&gt;\n&lt;color name=\"colorButtonTransparentBackgroundTintSdkEnrolment\"&gt;@android:color/transparent&lt;/color&gt;\n</code></pre> <p>You can change the text colors by overriding the following color in Theme class <pre><code>Theme.shared.colors.faceCapture.titleDark\n</code></pre></p> <p>You can change the background color by overriding the following color in Theme class: <pre><code>Theme.shared.colors.faceCapture.background\n</code></pre></p> <p>You can change the frame(3) color by overriding the following color in Theme class: (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\n</code></pre></p> <p>You can change the color of the retry button(4) (this affects all secondary style buttons) <pre><code>Theme.shared.colors.button.secondaryBackground\nTheme.shared.colors.button.secondaryTitle\n</code></pre></p> <p>You can change the color of the continue button(5) (this affects all primary style buttons) <pre><code>Theme.shared.colors.button.primaryBackground\nTheme.shared.colors.button.primaryTitle\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_PreviewView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app):</p> <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_PreviewView.html#image","title":"Image","text":"AndroidiOS <p>You can change the frame around the selfie by adding a drawable with this name: <pre><code>bg_face_capture_preview_image.xml\n</code></pre></p> <p>Does not apply to iOS</p>"},{"location":"Features/FaceCapture/FaceCapture_ScanView.html","title":"Scan View","text":"<p>The camera screen is no longer a custom view in order to allow us to better control the user flow. You can still apply any branding you want to the screen and change the frame format by using our FaceCaptureFrameFormat enum in the feature parameters.</p> <p></p> <p>It contains a title(1), a message(2), a cancel button(3), a frame(4) and a rotate camera button(5).</p>"},{"location":"Features/FaceCapture/FaceCapture_ScanView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/FaceCapture/FaceCapture_ScanView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;!-- Default messages--&gt;\n&lt;string name=\"face_capture_no_face_title_sdk_enrolment\"&gt;Let\\'s frame your face\u2026&lt;/string&gt;\n&lt;string name=\"face_capture_no_face_subtitle_sdk_enrolment\"&gt;Stand still, please&lt;/string&gt;\n\n&lt;!-- Possible title messages--&gt;\n&lt;string name=\"face_capture_processing_title_sdk_enrolment\"&gt;Just a moment\u2026&lt;/string&gt;\n&lt;string name=\"face_capture_mouth_open_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_invalid_rotation_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_invalid_verticalness_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_too_far_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_too_close_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_not_centered_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_multiple_faces_detected_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_no_face_title_sdk_enrolment\"&gt;Let\\'s frame your face\u2026&lt;/string&gt;\n&lt;string name=\"face_capture_eyes_closed_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_smiling_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n&lt;string name=\"face_capture_face_sideways_title_sdk_enrolment\"&gt;Prepare to take a selfie&lt;/string&gt;\n\n&lt;!-- Possible subtitle messages--&gt;\n&lt;string name=\"face_capture_processing_subtitle_sdk_enrolment\"&gt;Processing Photo&lt;/string&gt;\n&lt;string name=\"face_capture_mouth_open_subtitle_sdk_enrolment\"&gt;Close your mouth&lt;/string&gt;\n&lt;string name=\"face_capture_invalid_rotation_subtitle_sdk_enrolment\"&gt;Straighten your head&lt;/string&gt;\n&lt;string name=\"face_capture_invalid_verticalness_subtitle_sdk_enrolment\"&gt;Don\\'t look up/down&lt;/string&gt;\n&lt;string name=\"face_capture_too_far_subtitle_sdk_enrolment\"&gt;Approximate please&lt;/string&gt;\n&lt;string name=\"face_capture_too_close_subtitle_sdk_enrolment\"&gt;Go back please&lt;/string&gt;\n&lt;string name=\"face_capture_not_centered_subtitle_sdk_enrolment\"&gt;Center your head&lt;/string&gt;\n&lt;string name=\"face_capture_multiple_faces_detected_subtitle_sdk_enrolment\"&gt;Multiple faces detected&lt;/string&gt;\n&lt;string name=\"face_capture_ready_subtitle_sdk_enrolment\"&gt;One moment, please&lt;/string&gt;\n&lt;string name=\"face_capture_eyes_closed_subtitle_sdk_enrolment\"&gt;Open your eyes please&lt;/string&gt;\n&lt;string name=\"face_capture_smiling_subtitle_sdk_enrolment\"&gt;Keep a straight face&lt;/string&gt;\n&lt;string name=\"face_capture_face_sideways_subtitle_sdk_enrolment\"&gt;Look to the camera&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class  </p> <pre><code>//Possible title messages\nTheme.shared.strings.faceCapture.titleNoFace.localized()\nTheme.shared.strings.faceCapture.titleCountDown.localized()\nTheme.shared.strings.faceCapture.titleDone.localized()\nTheme.shared.strings.faceCapture.title.localized()\n\n\n//Possible subtitle messages\nTheme.shared.strings.faceCapture.info.localized()\nTheme.shared.strings.faceCapture.infoCountDown.localized()\nTheme.shared.strings.faceCapture.noFaceDetected.localized()\nTheme.shared.strings.faceCapture.turnedHead.localized()\nTheme.shared.strings.faceCapture.closedEyes.localized()\nTheme.shared.strings.faceCapture.smiling.localized()\nTheme.shared.strings.faceCapture.openMouth.localized()\nTheme.shared.strings.faceCapture.headOffCenter.localized()\nTheme.shared.strings.faceCapture.tooClose.localized()\nTheme.shared.strings.faceCapture.tooFar.localized()\nTheme.shared.strings.faceCapture.ready.localized()\nTheme.shared.strings.faceCapture.multipleFaces.localized()\nTheme.shared.strings.faceCapture.darkGlasses.localized()\nTheme.shared.strings.faceCapture.lowFaceQuality.localized()\nTheme.shared.strings.faceCapture.imageBlurredError.localized()\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_ScanView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtLightSdkEnrolment\"&gt;#DFFFFFFF&lt;/color&gt;\n\n&lt;!-- Rotate camera button --&gt;\n&lt;color name=\"colorFaceCaptureButtonStrokeSdkEnrolment\"&gt;#FFFFFF&lt;/color&gt;\n&lt;color name=\"colorFaceCaptureButtonBgSdkEnrolment\"&gt;#CFD8DC&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class <pre><code>Theme.shared.colors.faceCapture.title\nTheme.shared.colors.faceCapture.stateLabel\n</code></pre></p> <p>You can change the frame colors by overriding the following color in Theme class <pre><code>Theme.shared.colors.common.black\nTheme.shared.colors.faceCapture.stateError\nTheme.shared.colors.faceCapture.stateValid\n</code></pre></p> <p>You can change the mask and flash colors by overriding the following color in Theme class <pre><code>Theme.shared.colors.component.transparentOverlay\nTheme.shared.colors.faceCapture.flash\n</code></pre></p> <p>You can change the rotate camera button colors by overriding the following color in Theme class <pre><code>Theme.shared.colors.faceCapture.cameraSwitchButtonImageTint\nTheme.shared.colors.faceCapture.cameraSwitchButtonBackground\n</code></pre></p>"},{"location":"Features/FaceCapture/FaceCapture_ScanView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Light.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Light.Subtitle.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.ButtonCancel\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.Face.Capture.Button\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app):</p> <pre><code>Theme.shared.fonts.regular\n</code></pre>"},{"location":"Features/FaceCapture/FaceCapture_ScanView.html#image","title":"Image","text":"AndroidiOS <p>You can change the icon of the rotate camera button by adding a drawable with this name: <pre><code>ic_flip_camera.xml\n</code></pre> The image we are using is 48x48dp.</p> <p>You can change the icon of the cancel button by adding a drawable with this name: <pre><code>ic_cancel_sdk_enrolment.xml\n</code></pre> The image we are using is 24x24dp.</p> <p>You can change the icon of the cancel button by overriding the following image in Theme class <pre><code>Theme.shared.images.buttons.closeButton\n</code></pre></p> <p>You can change the icon of the rotate camera button by overriding the following image in Theme class <pre><code>Theme.shared.images.faceCapture.toggleCameraButton\n</code></pre></p>"},{"location":"Features/Form/Form_Index.html","title":"Form","text":"<p>Form is a feature that allows you to collect additional data and attach it to created subjects. The supported built-in data is currently:</p> <ul> <li>Email</li> <li>Text</li> </ul> <p>You can then submit this data, alongside your subject, through the AddSubjectParameters.</p> <p>To start the form feature, you can use the enrolment method</p> AndroidiOS <pre><code>/**\n * @param context\n * @param params [FormParameters] required to start the form feature\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results\n */\nfun startForm(\n    context: Context,\n    params: FormParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>// MARK: - FormFeature\n/// - Parameters:\n///   - parameters: Parameters for Form feature flow.\n///   - viewController: The view controller that will present the FormFeature.\n///   - completionHandler: The completion handler to call when the boarding pass parser feature is finished.\n///     This completion handler takes the following parameter:\n///\n///     Result&lt;FormReport, FormError&gt;\n///     Where `FormReport` contains  the form data and\n///     `FeatureError` the possible errors that may occur during the process.\nfunc startForm(parameters: FormParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;FormReport, FormError&gt;) -&gt; Void)\n</code></pre> <p>The <code>FormParameters</code> holds the flag to indicate wether you want errors to be shown or not, similar to other features</p> AndroidiOS <pre><code>    /**\n     * @param showErrors flag to show/hide feature errors\n     */\n    data class FormParameters(\n        val showErrors: Boolean,\n    )\n</code></pre> <pre><code>/// Parameters for the Form Feature flow.\npublic struct FormParameters {\n\n    /// If true, it will display a Default Error Screen, continues to return the Error in the completion handler\n    public let showErrors: Bool\n\n    public init(showErrors: Bool) {\n        self.showErrors = showErrors\n    }\n}\n</code></pre>"},{"location":"Features/Form/Form_Index.html#handle-result","title":"Handle Result","text":"AndroidiOS <p>Here's how you can get the result by using the result launcher that's passed as the final parameter:</p> <pre><code>private val formCallback: ActivityResultLauncher&lt;Intent&gt; =\n    registerForActivityResult(ShowFormResultLauncher()) {\n\n    }\n</code></pre> <p>The result of this operation will be the following model that will either hold an error or an answer</p> <pre><code>data class FormActivityResult(\n    val formAnswer: FormAnswer? = null,\n    val formError: FormError? = null\n)\n</code></pre> <pre><code>data class FormAnswer(\n    val formId: String,\n    val answers: List&lt;Answer&gt;\n)\n</code></pre> <p>Here's how you can get the report by calling the startForm function.</p> <pre><code>enrolment?.startForm(parameters: params, viewController: view, completionHandler: { result in\n    switch result {\n    case .success(let report):\n        // save report \n        completion(.success(()))\n    case .failure(let error):\n        completion(.failure(error))\n    }\n})\n</code></pre> <p>The FormReport has the following structure:</p> <pre><code>public struct FormReport {\n    let answer: [FormAnswer]\n\n    init(answer: [FormAnswer]) {\n        self.answer = answer\n    }\n}  \n</code></pre> <p>The FormAnswer has the following structure:</p> <pre><code>public class FormAnswer: Codable {\n    var formId: String\n    var answers: [Answer]\n\n    init(formId: String, answers: [Answer]) {\n        self.formId = formId\n        self.answers = answers\n    }\n}\n</code></pre> <p>The Answer has the following structure:</p> <pre><code>public class Answer: Codable{\n    var questionId: String\n    var value: String\n\n    init(questionId: String, value: String) {\n        self.questionId = questionId\n        self.value = value\n    }\n}\n</code></pre> <p>The FormError has the following structure:</p> AndroidiOS <pre><code>data class FormError(\n    val userCanceled: Boolean = false,\n    val termsAndConditionsAccepted: Boolean = true,\n    val featureError: FeatureError? = null\n)\n</code></pre> <pre><code>public class FormError: Error {\n    public var userCanceled: Bool\n    public var termsAndConditionsAccepted: Bool\n    public var featureError: FeatureError\n}\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_ErrorView.html","title":"Error View","text":"<p>When the showErrors flag is set to true in one of the Subject parameters classes, then any error that happens in this feature will show a default screen with some information. You can either customize this screen to your branding or set the flag to false and handle the error in your own activity.</p> <p>It contains a title(1), a message(2), an image(3), a warning icon(4), a list item layout(5), a retry button(6) and a background that can be customized. </p>"},{"location":"Features/SubjectManagement/SubjectManagement_ErrorView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/SubjectManagement/SubjectManagement_ErrorView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"feature_failure_title_sdk_enrolment\"&gt;There\\'s something wrong&lt;/string&gt;\n&lt;string name=\"feature_failure_subtitle_sdk_enrolment\"&gt;Check the items below:&lt;/string&gt;\n</code></pre></p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_ErrorView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorOverlayInvalidTxtSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayInvalidBgSdkEnrolment\"&gt;#F1F0F4&lt;/color&gt;\n</code></pre></p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_ErrorView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_ErrorView.html#image","title":"Image","text":"AndroidiOS <p>You can change the loading image by adding a drawable with this name: <pre><code>ic_subject_loading.xml\n</code></pre> The image we are using is 232x232dp.</p> <pre><code>// TODO\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html","title":"Subject Manager","text":"<p>A <code>Subject</code> consists of a set of data that represents a digital ID in the enrolment process. The Mobile ID SDK provides the ability to build and create such <code>Subject</code>.</p>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html#use-subject-manager","title":"Use Subject Manager","text":"<p>You can manage subjects using the subject management functions available in the enrolment facade. Subjects are the result of the enrolment process and need to be successfully created in the server-side platform, to complete any process requiring a digital form of identification. The subject will always be null when returned from the facade's method subject builder. This field will only be filled by our backend services, depending on if the subject is fully authenticated or not. If the user is not fully authenticated, the subject token will be filled only on when the app fetches the subject on the facade's get subject method. If the subject token is not null, it will contain a base 64 QR code that the user must present on the physical gate for a full authentication.</p> AndroidiOS <pre><code>data class Subject(\n    val id: String?,\n    val language: String,\n    val document: Document,\n    val biometrics: List&lt;Biometric&gt;,\n    val validationStatus: ValidationStatus,\n    val subjectToken: SubjectToken?,\n    var boardingPass: BoardingPass? = null\n)\n</code></pre> <pre><code>public struct Subject {\n    public let id: String\n    public let document: Document\n    public let biometrics: [Biometric]?\n    public var boardingPass: BoardingPass?\n    public var validationStatus: ValidationStatus\n    public var subjectToken: SubjectToken?\n    public var language: Locale\n    public var formData: [FormAnswer]?\n}\n</code></pre> <p>The subject <code>id</code> will be generated and returned upon adding it for the first time.</p> <p>The SubjectToken will have the following structure:</p> AndroidiOS <p>The SubjectToken will also provide a method to return the QR code as a bitmap. For this you just need to call the method getQRCodeImage().</p> <pre><code>data class SubjectToken(\n    val qrCodeBase64: String\n)\n</code></pre> <pre><code>public struct SubjectToken {\n    public var qrCodeBase64: String\n    public var qrCodeImage: UIImage?\n}\n</code></pre> <p>The ValidationStatus will have the following structure:   </p> AndroidiOS <pre><code>data class ValidationStatus(\n    val documentAuthenticated: Boolean,\n    val livenessCheckPassed: Boolean,\n    val biometryMatched: Boolean\n)\n</code></pre> <pre><code>public struct ValidationStatus {\n    /// Field indicating if the Enrolment photos matched.\n    public var biometryMatched: Bool\n    /// Field indicating if the liveness check test was performed with success.\n    public var livenessCheckPassed: Bool\n    /// Field indicating if the RFID scan of the document was performed with success.\n    public var documentAuthenticated: Bool\n}\n</code></pre> <p>Check the Document, BoardingPass and Biometric pages for more information about the remaining attributes.</p>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html#subject-operations","title":"Subject operations","text":"<p>You can create a new subject using the <code>addSubject</code> method. <code>Subject</code> data can be automatically submitted to the server-side platform after a successful document read and face matching operation, as shown in the following example:</p> AndroidiOS <pre><code>/**\n * Adds a [Subject].\n *\n * @param context Context\n * @param params contains instance from [Subject] that will be added in the server.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results .\n */\nfun addSubject(\n    context: Context,\n    params: AddSubjectParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>/// Saves a Subect to server.\n/// - Parameters:\n///   - parameters: Parameteres for the Add Subject flow.\n///   - viewController: View controller base from when to present required SDK view controllers.\n///   - completionHandler: The completion handler to call when the add subject operation is finished.\n///     This completion handler takes the following parameter:\n///\n///     Result&lt;Void, SubjectError&gt;\n///     Where `SubjectError` contains the possible errors that may occur during the process.\nfunc addSubject(parameters: AddSubjectParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;Void, SubjectError&gt;) -&gt; Void)\n</code></pre> <p>If you just need to build a subject, you must have the documentData object. The <code>documentData</code> must be filled by the client app, or it can be acquired from the DocumentReaderReport when scanning with the SDK scan document feature. The <code>documentPhoto</code> and <code>enrolmentPhoto</code> can be acquired from the Document Reader and the Face Capture features respectively. The <code>boardingPass</code> object can be acquired from the Boarding Pass Reader. The <code>matchReport</code> is a result of using the facade's face match feature. The <code>language</code> field is, by default, the locale in use on the device, allows the user to continue the enrollment in a kiosk with the correct language and it can be changed by client apps. With this data you can create the <code>BuildSubjectParameters</code> object. This object has the following structure:</p> AndroidiOS <pre><code>data class BuildSubjectParameters(\n    val documentData: DocumentData,\n    val documentPhoto: Bitmap,\n    val enrolmentPhoto: Bitmap,\n    val boardingPass: BoardingPass? = null,\n    val processReport: ProcessReport? = null,\n    val matchReport: MatchReport? = null,\n    val documentReaderReport: DocumentReaderReport? = null,\n    val language: Locale = Locale.getDefault(),\n)\n</code></pre> <pre><code>public struct BuildSubjectParameters {\n    public let showErrors: Bool\n    public let documentData: DocumentData\n    public let documentDataValidated: Bool\n    public let documentImage: UIImage\n    public let enrolmentImage: UIImage\n    public let boardingPass: BoardingPassSummary?\n    public let language: Locale\n    public let formReport: FormReport?\n    public let processReport: BiometricFaceCaptureReport?\n    public let documentReaderReport: DocumentReaderReport?\n\n    public init(documentData: DocumentData,\n            documentImage: UIImage,\n            enrolmentImage: UIImage,\n            boardingPass: BoardingPassSummary?,\n            documentReaderReport: DocumentReaderReport? = nil,\n            biometricFaceCaptureReport: BiometricFaceCaptureReport? = nil,\n            matchReport: MatchReport? = nil,\n            language: Locale? = nil,\n            showErrors: Bool,\n            formReport: FormReport? = nil)\n}\n</code></pre> <p>The following example shows how you can build a subject:</p> AndroidiOS <pre><code>launch {\n    val params = BuildSubjectParameters(\n        documentData = documentData,\n        documentPhoto = documentPhoto,\n        enrolmentPhoto = enrolmentPhoto,\n        boardingPass = boardingPass,\n        processReport = processReport,\n        matchReport = matchReport,\n        documentReaderReport = documentReaderReport\n    )\n    val result = enrolment.buildSubject(params)\n}\n</code></pre> <p>Warning</p> <p>Because the Subject model might become a big object it may cause the parcelable too large exception. For this reason, it\u2019s not parcelable. If you need to transform the Subject model in a parcelable object, you can use the helper method <code>toSubjectParcelable()</code> and after using it on a Bundle, you should reconvert it to a Subject using the method <code>toSubject()</code>.</p> <pre><code>let parameters = BuildSubjectParameters(\n    documentData: documentData,\n    documentImage: documentImage,\n    enrolmentImage: enrolmentImage,\n    boardingPass: EnrolmentData.shared.boardingPass,\n    documentReaderReport: EnrolmentData.shared.documentReaderReport,\n    biometricFaceCaptureReport: EnrolmentData.shared.biometricMatchReport,\n    matchReport: EnrolmentData.shared.matchReport,\n    language: Locale.current,\n    showErrors: true\n)\n\nguard let vco = self.view as? UIViewController else {\n    return\n}\n\nself.enrolment.buildSubject(\n    parameters: parameters,\n    viewController: vco) { [weak self] result in\n    switch result {\n    case .success(let subject):\n        self?.addSubject(subject: subject)\n    case .failure:\n        self?.view?.onBuildSubjectError()\n    }\n}\n</code></pre> <p>The SDK does not provide any UI solutions for subject representation. You should build your own layouts and use the information that is relevant for your mobile solution.</p> <p>These are all the subject methods: </p> AndroidiOS <pre><code>/**\n* Builds a [Subject] instance with the given [params].\n*\n* @param params [BuildSubjectParameters] that contains the necessary data to build the subject.\n* @return a [Result] with a [Subject] or [SubjectBuilderError].\n*/\nfun buildSubject(\n    activity: Activity,\n    params: BuildSubjectParameters\n): Result&lt;Subject, SubjectBuilderError&gt;\n\n/**\n * Adds a [Subject].\n *\n * @param context Context\n * @param params contains instance from [Subject] that will be added in the server.\n * @param resultLauncher [ActivityResultLauncher&lt;Intent&gt;] fragment or activity that will handle the results .\n */\nfun addSubject(\n    context: Context,\n    params: AddSubjectParameters,\n    resultLauncher: ActivityResultLauncher&lt;Intent&gt;\n)\n</code></pre> <pre><code>/// Build a Subject from document data. Can, optionally, receive a boarding pass.\n/// - Parameters:\n///   - parameters: Parameters for the Building Subject flow.\n///   - viewController: View controller base from when to present required SDK view controllers.\n///   - completionHandler: The completion handler to call when the build subject operation is finished.\n///     This completion handler takes the following parameter:\n///\n///     Result&lt;Subject, SubjectBuilderError&gt;\n///     Where `Subject` contains  the subject information and `SubjectError`\n///     the possible errors that may occur during the process.\nfunc buildSubject(parameters: BuildSubjectParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;Subject, SubjectError&gt;) -&gt; Void)\n\n/// Saves a Subect to server.\n/// - Parameters:\n///   - parameters: Parameteres for the Add Subject flow.\n///   - viewController: View controller base from when to present required SDK view controllers.\n///   - completionHandler: The completion handler to call when the add subject operation is finished.\n///     This completion handler takes the following parameter:\n///\n///     Result&lt;Void, SubjectError&gt;\n///     Where `SubjectError` contains the possible errors that may occur during the process.\nfunc addSubject(parameters: AddSubjectParameters, viewController: UIViewController, completionHandler: @escaping (Result&lt;Void, SubjectError&gt;) -&gt; Void)\n</code></pre> <p>Adding a <code>Subject</code> required the AddSubjectParameters which have the following structure:   </p> AndroidiOS <pre><code>data class AddSubjectParameters(\n    val showErrors: Boolean,\n    val subject: Subject,\n    val formAnswer: FormAnswer? = null,\n)\n</code></pre> <pre><code>public struct AddSubjectParameters {\n    public let showErrors: Bool\n    public let subject: Subject\n\n    public init(subject: Subject, showErrors: Bool)\n}\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html#handle-result","title":"Handle Result","text":"AndroidiOS <p>Here's how you can get the result by using the result launcher that's passed as the final parameter: <pre><code>private val addSubjectResultLauncher = registerForActivityResult(AddSubjectResultLauncher())\n{ result: GetSubjectActivityResult -&gt;\n    when {\n        result.success -&gt; {\n            val subjectId = result.subjectId\n            onSubjectAdded(subjectId)\n        }\n        else -&gt;\n            onSubjectDataError()\n    }\n}\n</code></pre></p> <p>The <code>add</code> operation will return the SubjectActivityResult model.</p> <pre><code>data class SubjectActivityResult(\n    val success: Boolean = false,\n    val subjectError: SubjectError? = null\n)\n</code></pre> <pre><code>self.enrolment.addSubject(\n    parameters: AddSubjectParameters(subject: subject),\n    viewController: vco) { [weak self] result in\n\n    switch result {\n    case .success:\n        print(\"Add Subject: Success!\")\n    case .failure(let error):\n        print(error.featureError.publicMessage)\n    }\n}\n</code></pre> <p>The SubjectError has the following structure:</p> AndroidiOS <pre><code>data class SubjectError(\n    val userCanceled: Boolean,\n    val termsAndConditionsAccepted: Boolean,\n    val featureError: FeatureError?\n)\n</code></pre> <pre><code>public class SubjectError: Error {\n    public var userCanceled: Bool\n    public var termsAndConditionsAccepted: Bool\n    public var featureError: FeatureError\n}\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html#biometric","title":"Biometric","text":"<p>The <code>biometrics</code> attribute on the <code>Subject</code> is a list of biometric data. This biometric data contains its source, a base64 of the image and it's format, which you can get the image bitmap by calling the method getBiometricImage(), type and position. Here is the structure of the Biometric data:</p> AndroidiOS <pre><code>data class Biometric(\n    val source: BiometricSource,\n    val data: String,\n)\n</code></pre> <pre><code>public struct Biometric {\n    public let source: BiometricSource\n    public let data: Data\n    public let photo: UIImage?\n}\n</code></pre> <p>The <code>BiometricFormat</code> will specify the format for the <code>data</code> string like so:</p> AndroidiOS <pre><code>/**\n* Biometric format type for both Face and Document captures\n*/\nenum class BiometricFormat {\n    UNKNOWN, JPG, PNG\n}\n</code></pre> <pre><code>    // TODO()\n</code></pre> <p>The <code>BiometricSource</code> is a enum with the source of the biometric photo and will have the following structure:</p> AndroidiOS <pre><code>enum class BiometricSource {\n    DOCUMENT,\n    CAPTURED,\n    ENROLLMENT\n}\n</code></pre> <pre><code>public enum BiometricSource: String {\n    case document = \"DOCUMENT\"\n    case captured = \"CAPTURED\"\n    case enrollment = \"ENROLLMENT\"\n}\n</code></pre> <p>The <code>BiometricType</code> defines the type of the biometric according to the captured element. A face capture will have a <code>BiometricTypeFace</code> and a document will have a <code>BiometricTypeDocument</code>, see the details below</p> AndroidiOS <pre><code>/**\n* Biometrics type for the Face capture\n*/\nenum class BiometricTypeFace: BiometricType {\n    UNKNOWN, ENROLMENT\n}\n\n/**\n* Biometrics type for the Documents capture\n*/\nenum class BiometricTypeDocument : BiometricType {\n    UNKNOWN, PAGE, SCAN, CHIP\n}\n</code></pre> <pre><code>    // TODO()\n</code></pre> <p>The <code>BiometricPosition</code> is something only present on face captured Biometrics </p> AndroidiOS <pre><code>    enum class BiometricPosition {\n        UNKNOWN, FACE\n    }\n</code></pre> <pre><code>    // TODO()\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html#subject-status","title":"Subject Status","text":"<p>After adding a <code>Subject</code>, the <code>id</code> will be returned. This <code>id</code> can be used to get the <code>SubjectStatus</code> which will contain information about the current status of a given <code>Subject</code>.</p> AndroidiOS <pre><code>    @Parcelize\n    data class SubjectStatus(val subjectId: String?, val status: Status, val detail: String?) :\n    Parcelable {\n\n        enum class Status {\n            PENDING,\n            VALIDATING,\n            INVALID,\n            ENROLLED,\n            EXPIRED\n        }\n    }\n</code></pre> <pre><code>    // TODO()\n</code></pre> <p>The <code>SubjectStatus</code> is accessible through the <code>Enrolment</code> by calling one these methods below and registering the <code>OnSubjectStatusResult</code> callback.</p> AndroidiOS <pre><code>/**\n * Gets the [Subject] status for the given subjectId.\n *\n * @param subjectId of the specified [Subject]\n * @param listener to get the result back\n */\nfun getSubjectStatus(\n    subjectId: String,\n    listener: OnSubjectStatusResult\n)\n\n/**\n * Gets a list of [SubjectStatus] for this device \n *\n * @param listener callback to get the [SubjectStatus] back\n */\nfun getAllSubjectStatus(\n    listener: OnSubjectStatusResult\n)\n\n/**\n * Callback for Success and Error when fetching a single or multiple [SubjectStatus]\n */\ninterface OnSubjectStatusResult {\n\n    /**\n     * Success callback\n     *\n     * @param status contains a list of [SubjectStatus] returning the [Subject] id and it's [SubjectStatus.Status]\n     */\n    fun onStatus(status: List&lt;SubjectStatus&gt;)\n\n    /**\n     * Error callback\n     */\n    fun onError(error: String)\n}\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Features/SubjectManagement/SubjectManagement_Index.html#subjectcustomviews","title":"SubjectCustomViews","text":"<p>The SDK provides default UI solutions for the Subject Management feature flow, as shown in the following images:</p> <p></p> <p>You can also apply your app\u2019s colors and fonts to these layout solutions, to keep your brand\u2019s image consistent. Check Customization tab to learn more about branding of each view.</p> AndroidiOS <p><pre><code>@Parcelize\nclass SubjectCustomViews(\n    val loadingView: Class&lt;out ICustomSubject.LoadingView&gt;? = null\n) : Parcelable\n</code></pre> You can use your own custom views in the subject functionality. Your view must implement the SDK view interfaces. For example, if you want to add a custom loading view, your view class must implement the ICustomSubject.LoadingView interface.</p> <p><pre><code>public class EnrolmentViewRegister {\n    ...\n\n    // MARK: - Subject Operations\n    public func registerSubjectLoadingOverlayView(_ viewType: SubjectLoadingOverlayViewType)\n    ...\n}\n</code></pre> You can use your own custom views in the subject functionality. Your view must implement the SDK view protocols. For example, if you want to add a custom loading view, your view class must implement the ICustomSubject.LoadingView interface.</p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html","title":"Loading View","text":"<p>The only view of the Subject flow is the loading view, appears when the SDK is doing an operation on the subject and communicates it to the server</p> <p></p> <p>It contains a title(1), a message(2), an image(3) and a background that can be customized.</p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html#branding","title":"Branding","text":"<p>You can apply your own branding to our screens by overriding the resources we use.</p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html#text-resources","title":"Text resources","text":"AndroidiOS <p>You can add your own texts and localization by overriding the following string resources: <pre><code>&lt;string name=\"subject_loading_title_sdk_enrolment\"&gt;Creating your Digital ID&lt;/string&gt;\n&lt;string name=\"subject_adding_subject_sdk_enrolment\"&gt;Adding subject\u2026&lt;/string&gt;\n&lt;string name=\"subject_getting_subject_sdk_enrolment\"&gt;Getting subject\u2026&lt;/string&gt;\n&lt;string name=\"subject_updating_subject_sdk_enrolment\"&gt;Updating subject\u2026&lt;/string&gt;\n&lt;string name=\"subject_deleting_subject_sdk_enrolment\"&gt;Deleting subject\u2026&lt;/string&gt;\n&lt;string name=\"subject_adding_boarding_pass_sdk_enrolment\"&gt;Adding boarding pass\u2026&lt;/string&gt;\n&lt;string name=\"subject_deleting_boarding_pass_sdk_enrolment\"&gt;Deleting boarding pass\u2026&lt;/string&gt;\n&lt;string name=\"common_loading_message_sdk_enrolment\"&gt;This will only take a moment&lt;/string&gt;\n&lt;string name=\"feature_permission_loading_message_sdk_enrolment\"&gt;Please wait\u2026&lt;/string&gt;\n</code></pre></p> <p>The best way to override strings is by adding your key through the Theme class <pre><code>Theme.shared.strings.subject.addSubjectLoadingTitle\nTheme.shared.strings.subject.addSubjectLoadingMessage\n\nTheme.shared.strings.subject.getSubjectLoadingTitle\nTheme.shared.strings.subject.getSubjectLoadingMessage\n\nTheme.shared.strings.subject.updateSubjectLoadingTitle\nTheme.shared.strings.subject.updateSubjectLoadingMessage\n\nTheme.shared.strings.subject.deleteSubjectLoadingTitle\nTheme.shared.strings.subject.deleteSubjectLoadingMessage\n\nTheme.shared.strings.subject.addSubjectBoardingPassLoadingTitle\nTheme.shared.strings.subject.addSubjectBoardingPassLoadingMessage\n\nTheme.shared.strings.subject.deleteSubjectBoardingPassLoadingTitle\nTheme.shared.strings.subject.deleteSubjectBoardingPassLoadingMessage\n</code></pre></p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html#colors","title":"Colors","text":"AndroidiOS <p>You can change the text colors by overriding the following color resource (It affects all texts): <pre><code>&lt;color name=\"colorFaceCaptureTxtDarkSdkEnrolment\"&gt;#1A1C1E&lt;/color&gt;\n</code></pre></p> <p>You can change the background color by overriding the following color resource: <pre><code>&lt;color name=\"colorOverlayFeedbackBgSdkEnrolment\"&gt;#EAEEF6&lt;/color&gt;\n</code></pre></p> <p>You can change the text colors by overriding the following color in Theme class (It affects all Loading Screens): <pre><code>Theme.shared.colors.checkPermission.title\nTheme.shared.colors.checkPermission.subtitle\n</code></pre> You can change the background color by overriding the following color in Theme class(It affects all Loading Screens): <pre><code>Theme.shared.colors.checkPermission.background\n</code></pre></p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html#styles","title":"Styles","text":"AndroidiOS <p>You can extend the styles we use and override any properties (textColor, textSize, fontFamily, etc...) you want. <pre><code>&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Title.Centered\"&gt;\n&lt;style name=\"Theme.Sdk.Enrolment.TextView.Dark.Subtitle.Centered\"&gt;\n</code></pre> Note: It will affect every component that uses the same style.</p> <p>You can change the font through the theme class (this will affect all text in the app): <pre><code>Theme.shared.fonts.bold\nTheme.shared.fonts.regular\n</code></pre></p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html#image","title":"Image","text":"AndroidiOS <p>You can change the loading animation by adding a raw json animation file with the following name: <pre><code>loading_subject_sdk_enrolment.json\n</code></pre></p> <p>You can change the loading image by overriding the following image name in Theme class <pre><code>Theme.shared.animations.subject.loadingCreate\n</code></pre></p>"},{"location":"Features/SubjectManagement/SubjectManagement_LoadingView.html#use-your-own-layouts","title":"Use your own layouts","text":"AndroidiOS <p>To use your own loading screen for subject feature, you need to implement the MobileID SDK Interface for that view.</p> <p>In this case: ICustomSubject.LoadingView <pre><code>interface LoadingView {\n    fun onServerCommunication()\n    fun onAddingSubject()\n    fun onGettingSubject()\n    fun onUpdatingSubject()\n    fun onDeletingSubject()\n    fun onAddingBoardingPass()\n    fun onDeletingBoardingPass()\n    fun hideLoading()\n}\n</code></pre> You can use these functions to change loading screen texts, or you can opt to ignore those functions.</p> <p>For example create a class SubjectLoadingCustomView, create a layout file and bind it.</p> <pre><code>class SubjectLoadingCustomView (\n   context: Context\n) : LinearLayoutCompat(context), ICustomSubject.LoadingView {\nprivate var binding: ViewSubjectLoadingBinding\n\n   init {\n       binding = ViewSubjectLoadingBinding.inflate(LayoutInflater.from(context), this)\n       orientation = VERTICAL\n       gravity = Gravity.CENTER\n   }\n\n   override fun onServerCommunication() {\n       // Do nothing\n   }\n\n   override fun onAddingSubject() {\n       binding.tvSubjectLoadingTitle.text = \"Adding subject\"\n   }\n\n   override fun onGettingSubject() {\n       binding.tvSubjectLoadingTitle.text = \"Getting subject\"\n   }\n\n   override fun onUpdatingSubject() {\n       binding.tvSubjectLoadingTitle.text = \"Updating subject\"\n   }\n\n   override fun onDeletingSubject() {\n       binding.tvSubjectLoadingTitle.text = \"Deleting subject\"\n   }\n\n   override fun onAddingBoardingPass() {\n       binding.tvSubjectLoadingTitle.text = \"Adding boarding pass to subject\"\n   }\n\n   override fun onDeletingBoardingPass() {\n       binding.tvSubjectLoadingTitle.text = \"Removing subject's boarding pass\"\n   }\n\n   override fun hideLoading() {\n        // Do nothing\n   }\n}\n</code></pre> <p>You need to register a class of type SubjectLoadingViewType through the following function of EnrolmentViewRegister <pre><code>public func registerSubjectLoadingView(_ viewType: SubjectLoadingViewType)\n</code></pre></p> <p>The SubjectLoadingOverlayViewType class needs to respect the following protocols:</p> <pre><code>public protocol FeatureLoadingViewInterface {\n    func onPreFeatureLoading()\n    func onPostFeatureLoading()\n    func hideLoading()\n}\n\npublic typealias FeatureLoadingViewType = FeatureLoadingView.Type\npublic typealias FeatureLoadingView = UIView &amp; FeatureLoadingViewInterface\n\npublic typealias LoadingOverlayViewType = LoadingOverlayView.Type\npublic typealias LoadingOverlayView = UIView &amp; LoadingOverlayViewInterface\n\npublic protocol SubjectLoadingViewInterface: FeatureLoadingViewInterface {\n    func onAddingSubject()\n    func onGettingSubject()\n    func onUpdatingSubject()\n    func onDeletingSubjec()\n    func onAddingBoardingPass()\n    func onDeletingBoardingPass()\n}\n\npublic typealias SubjectLoadingViewType = SubjectLoadingView.Type\npublic typealias SubjectLoadingView = UIView &amp; SubjectLoadingViewInterface\n</code></pre> <p>Example: <pre><code>class LoadingView: SubjectLoadingView {\n// MARK: - Initialization\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        //add any UI customization you need\n    }\n\n// MARK: - Functions\n\n    func onPreFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func onPostFeatureLoading() {\n        //add any UI customization you need\n    }\n\n    func hideLoading() {\n        //You can stop animations or other activities that consumes resources \n    }\n\n    func onAddingSubject() {\n        //add any UI customization you need\n    }\n\n    func onGettingSubject() {\n        //add any UI customization you need\n    }\n\n    func onUpdatingSubject() {\n        //add any UI customization you need\n    }\n\n    func onDeletingSubjec() {\n        //add any UI customization you need\n    }\n\n    func onAddingBoardingPass() {\n        //add any UI customization you need\n    }\n\n    func onDeletingBoardingPass() {\n        //add any UI customization you need\n    }\n}\n</code></pre></p>"},{"location":"MigrationGuide/MigrationGuide_Android.html","title":"Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#from-711-to-720","title":"From 7.1.1 to 7.2.0","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes","title":"Optional Changes","text":"<ul> <li>If you want to activate the Face Capture timeout, then you need to pass a value in milliseconds to faceCaptureTimeout in BiometricFaceCaptureParameters.</li> <li>If you mention the ScanTimeout Error type somewhere, you need to change it to Timeout due to the name change.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-710-to-711","title":"From 7.1.0 to 7.1.1","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes_1","title":"Optional Changes","text":"<ul> <li>If you use some resources from VB ImageProcessor, you will have to replace it, as it's now private to the SDK.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-700-to-710","title":"From 7.0.0 to 7.1.0","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes","title":"Required Changes","text":"<ul> <li>As part of the security improving efforts a <code>candidateHash</code> and <code>referenceHash</code> have been added to the BiometricMatchParameters, these can be found in the generated reports.</li> <li>Similarly, the build subject operation needs the generated <code>ProcessReport</code> and <code>DocumentReaderReport</code> that include the above hashes to verify data integrity. If you already use these parameters on the BuildSubjectParameters you don't need to take any action.</li> <li>The package name now needs to be added to the backoffice. You may need to contact Vision-Box for this update.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes_2","title":"Optional Changes","text":"<ul> <li>Add a public key on the initial configuration together with a private key setup on the backoffice to ensure encrypted requests.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-523-to-700","title":"From 5.2.3 to 7.0.0","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes_1","title":"Required Changes","text":"<ul> <li>Replace the signatures that do not use the ActivityLauncher contract;</li> <li>Remove the <code>get</code>, <code>update</code> and <code>delete</code> <code>Subject</code> operations. You should now save the <code>Subject</code> locally if you want to have a copy to check later. Updating a <code>Subject</code> is no longer supported as well so, you must create a new one if you want to for example, add a boarding pass;</li> <li>Handle errors by new field ErrorType instead of checking every possible errors;</li> <li>Filter through Biometrics by their source: Face, Chip or OCR;</li> <li>Rename enums to PascalCase, MALE is now Male, etc.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-521-to-522","title":"From 5.2.1 to 5.2.2","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes_2","title":"Required Changes","text":"<ul> <li>Contact Vision-Box to update apiKey used before testing new version. (Threshold values changed)</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-510-to-520","title":"From 5.1.0 to 5.2.0","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes_3","title":"Required Changes","text":"<ul> <li>Update camera2 library dependency to 1.2.3</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes_3","title":"Optional Changes","text":"<ul> <li>If you are using a value of less than 10 seconds or higher than 60 seconds for either the scanner or rfid reader timeout in  ReadDocumentParameters you need to change the value;</li> <li>It's no longer possible to disable the scanner or rfid reader timeout in  ReadDocumentParameters.</li> <li>The default face capture frame is now oval, to keep using the rectangular change the BiometricFaceCaptureParameters frameFormat</li> <li>Refactor any preview custom view that you might be using to be an independent activity/fragment in your own flow.</li> <li>Refactor any error custom view that you might be using to be an independent activity/fragment in your own flow.</li> <li>Remove success custom views that you might be using as they no longer exist.</li> <li>Remove FaceCapture BiometricProcessView and FaceProcessView as they were merged into the loading view.</li> <li>Update remaining custom views with their new contracts.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-503-to-510","title":"From 5.0.3 to 5.1.0","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes_4","title":"Required Changes","text":"<ul> <li>Remove the parameter showLivenessIcon from BiometricFaceCaptureParameters</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes_4","title":"Optional Changes","text":"<ul> <li>Add parameter includeTemplate in BiometricMatchParameters to receive a template.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-501-to-503","title":"From 5.0.1 to 5.0.3","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes_5","title":"Optional Changes","text":"<ul> <li>Remove the context parameter from the \"startDatabaseUpdate\" method in the facade</li> <li>The error parameter in the RegulaDatabaseListener's unableToPrepareDatabase method is now optional\"</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#from-425-to-501","title":"From 4.2.5 to 5.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#gradle","title":"Gradle","text":"<ul> <li>Update minSdkVersion from 21 to 23;</li> <li>Update compileSdkVersion to 31;</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#sdk","title":"SDK","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes_5","title":"Required Changes","text":"<ul> <li>The DataResultExtra class and ResultCode class's are now internal and you can handle the feature's result using our ResultHandler created for each feature. This feature ResultHandler will return a model containing the result of the feature. Check the \"Handle Results\" section of each feature to understand how to handle results.</li> <li>Rename BiometricMatchParameters path to \"com.visionbox.mobileid.sdk.enrolment.data.biometricFaceMatch.BiometricMatchParameters\";</li> <li>Rename SubjectBuilderError path to \"com.visionbox.mobileid.sdk.enrolment.data.subject.subjectBuilder.error.SubjectBuilderError\";</li> <li>Rename BuildSubjectParameters path to \"com.visionbox.mobileid.sdk.enrolment.data.subject.subjectBuilder.BuildSubjectParameters\";</li> <li>Rename SubjectPermissionDenied to SubjectPermissionDeniedError and rename SubjectNotFound to SubjectNotFoundError;</li> <li>Removed Vision-Box parameters from the BiometricFaceCaptureParameters. These configurations are now on backoffice;</li> <li>Removed Vision-Box parameters from the BiometricMatchParameters. These configurations are now on backoffice;</li> <li>Removed Subject's validateBiometricQuality configuration. This configuration is now on backoffice;</li> <li>Removed BoardingPassScanConfig. The Boarding Pass configuration is now on backend level;</li> <li>All Serializable classes changed to Parcelable. Check your onActivityResult methods and change \"getSerializableExtra\" to \"getParcelableExtra\";</li> <li>Biometric Face Match and Subject features won't return a result, instead the results are obtained using the Android onActivityResult method. Check README for information on how to handle the results for these two features and also how you can use custom views for these features if you need it;</li> <li>The methods \"addBoardingPass\" and \"deleteBoardingPass\" of the Enrolment won't return direct response, the behavior should be the same of the other Subject Enrolment methods;</li> <li>Removed RX module;</li> <li>The \"buildSubject\" enrolment method has a new parameter: <pre><code>fun buildSubject(activity: Activity, params: BuildSubjectParameters)\n</code></pre></li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes_6","title":"Optional Changes","text":"<ul> <li>If you are using fragments, you can now change to the new Enrolment methods that support Fragments; <pre><code>// Example:\nfun readDocument(context: Context, params: DocumentReaderParameters, resultLauncher: ActivityResultLauncher&lt;Intent&gt;)\n</code></pre></li> <li>Removed localization support from backend, if you used our screens and our localization definition from backoffice, you must now create your own files.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html","title":"Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-712-to-720","title":"From 7.1.2 to 7.2.0","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes","title":"Optional Changes","text":"<ul> <li>faceCaptureTimeout have been added to the BiometricFaceCaptureParameters, to be able to start the RFID scan automatically</li> <li>If you mention the ScanTimeout Error type somewhere, you need to change it to Timeout due to the name change.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-710-to-711","title":"From 7.1.0 to 7.1.1","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes_1","title":"Optional Changes","text":"<ul> <li>showRFIDInstructions have been added to the ReadDocumentParameters, to be able to start the RFID scan automatically</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-700-to-710","title":"From 7.0.0 to 7.1.0","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes","title":"Required Changes","text":"<ul> <li>As part of the security improving efforts a <code>candidateHash</code> and <code>referenceHash</code> have been added to the BiometricMatchParameters, these can be found in the generated reports.</li> <li>Similarly, the build subject operation needs the generated <code>ProcessReport</code> and <code>DocumentReaderReport</code> that include the above hashes to verify data integrity. If you already use these parameters on the BuildSubjectParameters you don't need to take any action.</li> <li>The package name now needs to be added to the backoffice. You may need to contact Vision-Box for this update.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes_2","title":"Optional Changes","text":"<ul> <li>Add a public key on the initial configuration together with a private key setup on the backoffice to ensure encrypted requests.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-523-to-700","title":"From 5.2.3 to 7.0.0","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes_1","title":"Required Changes","text":"<ul> <li>Remove the <code>get</code>, <code>update</code> and <code>delete</code> <code>Subject</code> operations. You should now save the <code>Subject</code> locally if you want to have a copy to check later. Updating a <code>Subject</code> is no longer supported as well so, you must create a new one if you want to for example, add a boarding pass;</li> <li>Handle errors by new field ErrorType instead of checking every possible errors;</li> <li>Filter through Biometrics by their source: Face, Chip or OCR;</li> <li>Rename enums to PascalCase, MALE is now Male, etc.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-510-to-520","title":"From 5.1.0 to 5.2.0","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes_2","title":"Required Changes","text":"<ul> <li>If you are using a value of less than 10 seconds or greater than 60 for the scannerTimeout or rfidTimeout in  ReadDocumentParameters you need to change the value.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes_3","title":"Optional Changes","text":"<ul> <li>If you want to continue with the square frame you need to set the frameShape field of the class BiometricFaceCaptureParameters to .square</li> <li>Refactor any preview custom view that you might be using to be an independent UIViewController in your own flow.</li> <li>Refactor any error custom view that you might be using to be an independent UIViewController in your own flow.</li> <li>Update remaining custom views with their new protocols.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-500-to-510","title":"From 5.0.0 to 5.1.0","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes_3","title":"Required Changes","text":"<ul> <li>Removed liveness status parameter from the BiometricFaceCaptureParameters.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes_4","title":"Optional Changes","text":"<ul> <li>If you are using BiometricFaceCapturePreviewView custom view, you must remove the property livenessStatus.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes_5","title":"Optional Changes","text":"<ul> <li>Add parameter includeTemplate in BiometricMatchParameters to receive a template.</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-424-to-500","title":"From 4.2.4 to 5.0.0","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#cocoapods","title":"CocoaPods","text":"<ul> <li>Run pod update &amp; install</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes_4","title":"Required Changes","text":"<ul> <li>Removed BoardingPassScanConfig. The Boarding Pass configuration is now on backend side;</li> <li>Removed Vision-Box parameters from the BiometricFaceCaptureParameters. These configurations are now on backoffice;</li> <li>Removed Vision-Box parameters from the BiometricMatchParameters. These configurations are now on backoffice;</li> <li>Removed Subject's validateBiometricQuality configuration. This configuration is now on backoffice;</li> <li>Removed Alamofire lib;</li> <li>Removed specific feature loadings and created a generic one, e.g. remove calls for BoardingPassScannerLoadingView &amp; BoardingPassScannerLoadingView and replace it with the new one LoadingOverlayViewType.</li> <li></li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes_6","title":"Optional Changes","text":"<ul> <li>Added new method startUpdateDatabase to allow database download. If the method isn't called, then it will be downloaded upon the first usage of our sdk.</li> <li>Removed localization support from backend, if you used our screens and our localization definition from backoffice, you must now create your own files.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html","title":"MobileID SDK - Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#720","title":"7.2.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements","title":"Improvements","text":"<ul> <li>Face Capture Timeout: Introduced a configurable timeout for the Face Capture feature. This can be set using the faceCaptureTimeout parameter in BiometricFaceCaptureParameters. The timeout default is disabled and the minimum allowed timeout is 30 seconds.</li> <li>Improved localization support documentation</li> <li>Error Handling: Removed the retry button from the default error screen for InternalError cases as retries are not effective in these situations.</li> <li>Updated Regula SDK to version 7.3.</li> <li>Changed the ScanTimeout error type to Timeout.</li> <li>Fixed an infinite loop issue in the Document Reader.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#713","title":"7.1.3","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_1","title":"Improvements","text":"<ul> <li>Fix an issue with passive authentication while using Regula version 7.2</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#712","title":"7.1.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_2","title":"Improvements","text":"<ul> <li>Update Regula to 7.2</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#711","title":"7.1.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_3","title":"Improvements","text":"<ul> <li>Handle SubjectDataIntegrityFailed to prevent crashes while building the subject if the data validation fails.</li> <li>Change VB ImageProcessor's visibility to private.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#710","title":"7.1.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_4","title":"Improvements","text":"<ul> <li>Improved security measures:<ul> <li>Communications with the backend are now encrypted using hybrid encryption;</li> <li>Data integrity is verified in communications with the backend;</li> <li>Data integrity is verified in the build subject and face match operations;</li> <li>HTTP responses are signed and verifiable</li> </ul> </li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#whats-new","title":"What's new","text":"<ul> <li>Form feature</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#702","title":"7.0.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_5","title":"Improvements","text":"<ul> <li>Fixed an issue with some boarding pass formats</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#701","title":"7.0.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_6","title":"Improvements","text":"<ul> <li>Removed mandatory preview screen in face capture;</li> <li>Fixed an issue with regula database listener;</li> <li>Changed adding a subject without a boarding pass when it's mandatory error code to it's own error code;</li> <li>Clean Regula resources upon document reader finished in order to reduce memory consumption;</li> <li>Added a new parameter to DocumentReaderConfig called checkHologram* to enable Regula's hologram scan, to prevent fraudulent documents.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#700","title":"7.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#important","title":"IMPORTANT","text":"<ul> <li>In Q1 2024, 7.1.0 will be released targeting API 34.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#whats-new_1","title":"What's new","text":"<ul> <li>New subject service (now works asynchronously)</li> <li>Removed the <code>get</code>, <code>delete</code> and <code>update</code> subject signatures;</li> <li>Clients need to save the subject locally after adding.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_7","title":"Improvements","text":"<ul> <li>Removed the signatures that use the deprecated <code>onActivityResult</code> function that were deprecated;</li> <li>Removed some external dependencies to improve SDK size;</li> <li>Changed Java compile version to 17;</li> <li>Replaced synthetic views with view binding.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#removed","title":"Removed","text":"<ul> <li>Moshi;</li> <li>Restring</li> <li>kotlin-android-extensions plugin.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#523","title":"5.2.3","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_8","title":"Improvements","text":"<ul> <li>Improved frame of face capture drawing by adjusting the ratios.</li> <li>Fix issues that subjects couldn't be created with national ID documents and resident cards.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#522","title":"5.2.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_9","title":"Improvements","text":"<ul> <li>Improved Face capture process by:</li> <li>Fix issue with new mouth open algorithm (requires changes in Backoffice before upgrading)</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#521","title":"5.2.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_10","title":"Improvements","text":"<ul> <li>Improved Face capture process by:</li> <li>Calculate input frame lightning conditions, contrast and sharpness.</li> <li>Improved multiple faces check to focus on the closer face.</li> <li>Changed mouth open algorithm.</li> <li>Fixed switch between frontal and back cameras.</li> <li>Added CameraConfig to BiometricFaceCaptureParameters to control if the toggle camera button should appear and the initial camera facing (Front or back camera)</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#520","title":"5.2.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_11","title":"Improvements","text":"<ul> <li>Added a minimum value of 10 seconds, and a maximum value of 60 seconds for document scanner and rfid reader timeouts.</li> <li>Added feature to disable regula passive auth for some documents by their ID.</li> <li>Removed preview custom views from every feature, if you don't want our default screen, turn off the showPreview flag in feature parameters.</li> <li>Removed error custom views from every feature, if you don't want our default screen, turn off the showErrors flag in feature parameters.</li> <li>Removed success custom view interfaces as they were no longer being used by our SDK.</li> <li>Improved loading animations.</li> <li>Improved image handling process.</li> <li>Changed the default face capture frame to Oval shape, but added an option in parameters to use the square option as well.</li> <li>Refactor remaining custom views interfaces to make it easier to implement.</li> <li>Separated Face Capture Image processing to another SDK in order to increase testability.</li> <li>Updated Regula version to 6.8.</li> <li>Fix timezone bug on preview screen.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#warning","title":"Warning","text":"<ul> <li>Functions marked with deprecated will be removed in version 6.0.0, please update following their suggestions.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#513","title":"5.1.3","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_12","title":"Improvements","text":"<ul> <li>Updated to Regula 6.6;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#512","title":"5.1.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_13","title":"Improvements","text":"<ul> <li>Fixed bug that Android devices which API level was 9 or less couldn't detect when the user had it's mouth open during real time analysis;</li> <li>Calculate intra ocular distance in order to detect proximity to the camera;</li> <li>Fixed bug that sometimes final image wouldn't be processed and caused an infinite loading during face capture;</li> <li>Fixed bug that RFID custom views were being overlapped.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#downgrades","title":"Downgrades","text":"<ul> <li>Downgraded regula to 6.3.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#511","title":"5.1.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_14","title":"Improvements","text":"<ul> <li>Updated to Regula 6.6;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#510","title":"5.1.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_15","title":"Improvements","text":"<ul> <li>Minor UI/UX improvements.</li> <li>Remove Liveness icon from Face Capture preview</li> <li>Added TemplateOption to BiometricMatchParameters</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#downgrades_1","title":"Downgrades","text":"<ul> <li>Downgraded regula to 6.3.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#503","title":"5.0.3","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#whats-new_2","title":"What's new","text":"<ul> <li>Added a new method to the enrolment facade to remove the database update listener</li> <li>New liveness endpoint.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_16","title":"Improvements","text":"<ul> <li>Improved document reader timeouts functionality, so that it's possible to disable them.</li> <li>Improved RFID timeout, now only starts after instruction screen.</li> <li>Improved BuildSubjectParameters, If no custom language is provided, use the language defined in the EnrolmentConfig or as last resort the device language.</li> <li>Added animations to improve UX.</li> <li>Added progress bar to show that the chip is being read.</li> <li>Fixed the verification message that checked if the user has it's mouth open while taking the selfie.</li> <li>Improved real time analysis of selfie capture to improve feedback on older smartphones.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#502","title":"5.0.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_17","title":"Improvements","text":"<ul> <li>Updated to Regula 6.6;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#501","title":"5.0.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#whats-new_3","title":"What's new","text":"<ul> <li>Added Fragment support to Enrolment methods;</li> <li>Added logs to Subject Builder;</li> <li>Biometric Face Match has a new workflow. It uses the onActivityResult Android architecture to return results;</li> <li>Subject Enrolment methods have a new workflow. They use the onActivityResult Android architecture to return results;</li> <li>Biometric Face Capture now has real-time image processing with feedback to increase odds of taking a quality picture for the match service;</li> <li>The EnrolmentConfig has a new configuration to set the SDK language;</li> <li>Document Reader database download can now be controlled by the client;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements_18","title":"Improvements","text":"<ul> <li>Minimum SDK version changed to 23;</li> <li>Upgraded external dependencies;</li> <li>Updated to Regula 6.3;</li> <li>Migrated from Firebase to MLKit;</li> <li>Improved Sentry logs;</li> <li>Improved feature logs;</li> <li>Improved SDK default UI;</li> <li>Simplified SDK configurations by moving some to backoffice;</li> <li>New Biometric Match service that improved performance;</li> <li>Uses Mobile API 4.0;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#removed_1","title":"Removed","text":"<ul> <li>OkHttpClient library;</li> <li>RX support;</li> <li>Localization support from backend;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html","title":"MobileID SDK - Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#720","title":"7.2.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements","title":"Improvements","text":"<ul> <li>Face Capture Timeout: Introduced a configurable timeout for the Face Capture feature. This can be set using the faceCaptureTimeout parameter in BiometricFaceCaptureParameters. The timeout default is disabled and the minimum allowed timeout is 30 seconds. </li> <li>Improved localization support documentation</li> <li>Error Handling: Removed the retry button from the default error screen for InternalError cases as retries are not effective in these situations.</li> <li>Updated Regula SDK to version 7.3.</li> <li>Changed the ScanTimeout error type to Timeout.</li> <li>Fixed an infinite loop issue in the Document Reader.</li> <li>Resolved layout inconsistencies in the Face Capture UI.</li> <li>Prevented simultaneous pressing of RFID skip and start buttons in the Document Reader.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#712","title":"7.1.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_1","title":"Improvements","text":"<ul> <li>Update Regula to 7.2</li> <li>Improvements in BiometricFaceCapture feature.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#711","title":"7.1.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_2","title":"Improvements","text":"<ul> <li>Added a new parameter to ReadDocumentParameters called showRFIDInstructions  that allows you to skip the RFID scan instruction screen</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#710","title":"7.1.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_3","title":"Improvements","text":"<ul> <li>Improved security measures:<ul> <li>Communications with the backend are now encrypted using hybrid encryption;</li> <li>Data integrity is verified in communications with the backend;</li> <li>Data integrity is verified in the build subject and face match operations;</li> <li>HTTP responses are signed and verifiable</li> </ul> </li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#whats-new","title":"What's new","text":"<ul> <li>Form feature</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#701","title":"7.0.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_4","title":"Improvements","text":"<ul> <li>Fixed an issue with Boarding Pass Preview clickable rows </li> <li>Added a new parameter to DocumentReaderConfig called checkHologram* to enable Regula's hologram scan, to prevent fraudulent documents.</li> <li>Removed mandatory preview screen in face capture;</li> <li>Changed adding a subject without a boarding pass when it's mandatory error code to it's own error code;</li> <li>Fix id 215 and 224 to appear as IDCard in Document Reader </li> <li>Fix issues with oval drawing in Face Capture</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#700","title":"7.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#whats-new_1","title":"What's new","text":"<ul> <li>New subject service (now works asynchronously)</li> <li>Removed the <code>get</code>, <code>delete</code> and <code>update</code> subject signatures;</li> <li>Clients need to save the subject locally after adding.</li> <li>Improve error handling</li> <li>The boarding pass can be read from an image</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_5","title":"Improvements","text":"<ul> <li>Fix issues with Loading Screen Animations</li> <li>Add Camera permissions messages in Boarding Pass Scanner and Face Capture </li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#523","title":"5.2.3","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_6","title":"Improvements","text":"<ul> <li>Updated to Lottie 4.3.3</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#522","title":"5.2.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_7","title":"Improvements","text":"<ul> <li>Improved the fetching of needed resources in the DocumentReader feature.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#521","title":"5.2.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_8","title":"Improvements","text":"<ul> <li>Improved Face capture process by:</li> <li>Improved multiple faces check to focus on the closer face.</li> <li>Added CameraConfig to BiometricFaceCaptureParameters to control if the toggle camera button should appear and the initial camera facing (Front or back camera)</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#520","title":"5.2.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_9","title":"Improvements","text":"<ul> <li>The frameShape field of the class BiometricFaceCaptureParameters can now be set to choose between an oval or square shape, default is oval</li> <li>The scannerTimeout and rfidTimeout field of the class ReadDocumentParameters has a maximum and minimum value (maximum 60, minimum 10)</li> <li>The scannerTimeout field of the class ReadDocumentParameters can now be set to nil to be disabled</li> <li>Removed preview custom views from every feature, if you don't want our default screen, turn off the showPreview flag in feature parameters.</li> <li>Removed error custom views from every feature, if you don't want our default screen, turn off the showErrors flag in feature parameters.</li> <li>Refactor remaining custom views protocols to make it easier to implement.</li> <li>Added feature to disable regula passive auth for some documents by their ID.</li> <li>Improved loading animations.</li> <li>Improved image handling process.</li> <li>Updated Regula version to 6.8</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#511","title":"5.1.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_10","title":"Improvements","text":"<ul> <li>Updated to Lottie 3.4;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#510","title":"5.1.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_11","title":"Improvements","text":"<ul> <li>Minor UI/UX improvements.</li> <li>Added TemplateOption to BiometricMatchParameters</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#removed","title":"Removed","text":"<ul> <li>Liveness icon from Face Capture preview screen</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#503","title":"5.0.3","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_12","title":"Improvements","text":"<ul> <li>Improved RFID timeout, now only starts after instruction screen.</li> <li>Improved error and timeout messages.\u00a0</li> <li>Improved UI</li> <li>Added animations to improve UX.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#502","title":"5.0.2","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_13","title":"Improvements","text":"<ul> <li>Updated to Regula 6.6;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#501","title":"5.0.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#whats-new_2","title":"What's new","text":"<ul> <li>Biometric Face Capture now has real-time image processing with more feedback to increase odds of taking a quality picture for the match service;</li> <li>The EnrolmentConfig has a new configuration to set the SDK language;</li> <li>Document Reader database download can now be controlled by the client;</li> <li>Added logs to Subject Builder;</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements_14","title":"Improvements","text":"<ul> <li>Upgraded external dependencies;</li> <li>Migrated to Vision framework for image processing;</li> <li>Improved Sentry logs;</li> <li>Improved feature logs;</li> <li>Improved SDK default UI;</li> <li>Simplified SDK configurations by moving some to backoffice;</li> <li>New Biometric Match service that improved performance;</li> <li>Uses Mobile API 4.0;</li> <li>Updated to Regula 6.3; </li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#removed_1","title":"Removed","text":"<ul> <li>Alamofire library;</li> <li>Localization support from backend;</li> </ul>"}]}